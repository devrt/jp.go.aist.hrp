# -*- Makefile -*-

include $(TOP)Make.vars

# Make
MAKE 			= 	make
LINK_FLAGS		=
EXPANDMACRO		=:
CXX_FLAGS_COMMON	=	-c -Wall -fPIC -I$(COMMON)

OSNAME			=	$(shell uname -s)

#
# ORB Settings
#
# omniORB
ifneq ("$(OB_DIR)", "")
 CXX_FLAGS_COMMON	+=	-I$(OB_DIR)/include
 OB_LIBS		=	-L$(OB_DIR)/lib
 OB_IDLC		=	$(OB_DIR)/bin/omniidl
else
 OB_LIBS		=	
 OB_IDLC		=	omniidl
endif

OB_LIBS			+=	-lomniORB4 -lomnithread

CXX_FLAGS_COMMON	+= 	-D__x86__ -DOMNIORB4


# OpenRTM
ifneq ("$(OPENRTM_DIR)", "")
# CXX_FLAGS_COMMON	+=	$(shell $(OPENRTM_DIR)/bin/rtm-config --cflags)
# RTM_LIBS		=	$(shell $(OPENRTM_DIR)/bin/rtm-config --libs)
CXX_FLAGS_COMMON	+=	-I$(OPENRTM_DIR)/include -Wall -O -I$(OPENRTM_DIR)/include/rtm/idl
RTM_LIBS		=	-L$(OPENRTM_DIR)/lib -Wl,-rpath,$(OPENRTM_DIR)/lib \
				-lpthread -lACE -lomniORB4 -lomnithread -lomniDynamic4 -lRTC
else
 CXX_FLAGS_COMMON	+=	-I/usr/include/rtm/idl -I/usr/local/include/rtm/idl
 RTM_LIBS		=	-Wl,-z,defs -lpthread -lACE -lomniORB4 -lomnithread -lomniDynamic4 -lRTC
endif


# TVmet
ifneq ("$(TVMET_DIR)", "")
 CXX_FLAGS_COMMON	+=	-I$(TVMET_DIR)/include
endif
ifeq ($(DEBUG_VER), 0)
 CXX_FLAGS_COMMON	+=	-DTVMET_OPTIMIZE
endif

# Boost Includes
ifneq ("$(BOOST_INC_DIR)", "")
 CXX_FLAGS_COMMON	+=	-I$(BOOST_INC_DIR)
endif

ifeq ("$(DYNAMICS_ENGINE)", "ut")
 DYNAMICS_SERVER_DIR = server.ut
else
 DYNAMICS_SERVER_DIR = server
endif


#
# Compiler Options
#
CXX 			= 	g++

ifeq ("$(OSNAME)","QNX")
 CXX 			= 	QCC -V3.3.5,gcc_ntox86_cpp
endif

CXX_INTEL		= 	icpc

AR			=	ar
AR_FLAGS		=	rcus
AR_OUTOPT		=

OUTOPT 			= 	-o 
OBJOPT 			= 	-o 
LIBOPT 			= 	-l
LPOPT			= 	-L
ifeq ("$(OSNAME)","Darwin") 
 SOFLAGS 		= 	-dynamiclib
 DLLSFX 		= 	dylib
else
 SOFLAGS		=	-shared
 DLLSFX			=	so
endif
EXESFX 			=
LIBPFX  		= 	lib
LIBSFX			=
SLIBSFX			=	.a


#
# Optimization
#
OPT_GNU		= -O3
OPT_INTEL	= -O3


# Intel Compiler Optimizations
VECOPT_INTEL = -vec-report5

ifeq ("$(M_ARCHITECTURE)", "i386")
 MARCHOPT_INTEL = -xKNOW -ipo -ip # 32bit code paths
else
 MARCHOPT_INTEL = -axT -xW -ipo -ip # 64bit code paths
endif


#
# OPENMP available from gcc-4.2.x
#
ifdef OPENMP
 OPT_GNU += -D_GLIBCXX_PARALLEL -fopenmp
 OPT_INTEL += -openmp -openmp-report=2
 ifdef USE_INTEL_COMPILER
  OMP_LIB = -L/opt/intel/cce/10.1.011/lib -liomp5 -lpthread
 else
  OMP_LIB = -lgomp
 endif
endif

ifdef INTEL_PROFILE_GENERATE
 ifeq ($(INTEL_PROFILE_GENERATE), 1)
  OPT_INTEL += -prof_gen
 else
  OPT_INTEL += -prof_use
 endif
endif


ifeq ($(DEBUG_VER), 0)
 OPT_GNU	+= -DNDEBUG
 OPT_INTEL	+= -DNDEBUG
else 
ifeq ($(DEBUG_VER), 1)
 OPT_GNU	+= -g -ggdb3 -pg
 OPT_INTEL	+= -ggdb3 -qp
# profile
# LINK_FLAGS += -pg
else 
ifeq ($(DEBUG_VER), 2)
 OPT_GNU	= -g -ggdb3 -pg
 OPT_INTEL	= -ggdb3 -qp
endif
endif
endif

# workaround for intel compiler + g++ 4.2.1
OPT_INTEL += -D "__sync_fetch_and_add(ptr,addend)=_InterlockedExchangeAdd(const_cast<void*>(reinterpret_cast<volatile void*>(ptr)), addend)"

ifeq ($(M_ARCHITECTURE),amd64)
 INTEL_RPATH	= -Wl,-rpath,/opt/intel/cce/$(INTEL_COMPILER_VERSION)/lib
else
 INTEL_RPATH	= -Wl,-rpath,/opt/intel/cc/$(INTEL_COMPILER_VERSION)/lib
endif

# default gnu
CXX_FLAGS	= $(CXX_FLAGS_COMMON) $(OPT_GNU) $(CXX_CPU_FLAGS)

# switch for Intel Compiler
ifdef USE_INTEL_COMPILER
 ifeq ($(USE_INTEL_COMPILER), 1)
  CXX		= $(CXX_INTEL)
  CXX_FLAGS	= $(CXX_FLAGS_COMMON) $(OPT_INTEL) $(VECOPT_INTEL) $(MARCHOPT_INTEL)
 endif
endif

LINK 		= $(CXX)

LAPACK_LIBS =

ifneq ("$(LAPACK_INC_DIR)", "")
 CXX_FLAGS += -I$(LAPACK_INC_DIR)
endif

ifneq ("$(LAPACK_LIB_DIR)", "")
 LAPACK_LIBS += -L$(LAPACK_LIB_DIR)
endif

ifeq ("$(LAPACK_VARIANT)", "")
 LAPACK_VARIANT = LAPACK
endif

ifeq ("$(LAPACK_VARIANT)", "LAPACK")
 LAPACK_LIBS += -llapack -lblas -lg2c
endif

ifeq ("$(LAPACK_VARIANT)", "CLAPACK")
 LAPACK_LIBS += $(LAPACK_LIB_DIR)/lapack$(CLAPACK_SUFFIX).a $(LAPACK_LIB_DIR)/blas$(CLAPACK_SUFFIX).a
 ifeq ("$(OSNAME)","Darwin")
  LAPACK_LIBS += $(LAPACK_LIB_DIR)/F2CLIBS/libf2c.a
 else
  LAPACK_LIBS += $(LAPACK_LIB_DIR)/F2CLIBS/libF77.a
 endif
 ifneq ("$(LAPACK_INC_DIR)", "")
  CXX_FLAGS += -I$(LAPACK_INC_DIR)/F2CLIBS
 endif
endif

ifeq ("$(LAPACK_VARIANT)", "ATLAS")
 CXX_FLAGS += -DUSE_CLAPACK_INTERFACE
 ifneq ("$(LAPACK_VARIANT_LIB_DIR)","")
  LAPACK_LIBS += -L$(LAPACK_VARIANT_LIB_DIR)
 endif
 LAPACK_LIBS += -llapack
 ifeq ("$(USE_CBLAS_INTERFACE)", "1")
  LAPACK_LIBS += -lcblas
 else
  LAPACK_LIBS += -lblas
 endif
 ifeq ("$(OSNAME)","QNX")
  LAPACK_LIBS += -latlas
 endif
endif

ifeq ("$(LAPACK_VARIANT)", "MKL")
 ifeq ($(M_ARCHITECTURE),i386)
  LAPACK_LIBS += -L/opt/intel/mkl/$(INTEL_MKL_VERSION)/lib/32
 else
  LAPACK_LIBS += ->/opt/intel/mkl/$(INTEL_MKL_VERSION)/lib/em64t
 endif
  LAPACK_LIBS += -Wl,-rpath,$(LAPACK_LIB_DIR) -L$(LAPACK_LIB_DIR) -lmkl_lapack -lmkl
endif


ifneq ("$(BOOST_LIB_DIR)", "")
 LINK_FLAGS += -L$(BOOST_LIB_DIR) -Wl,-rpath,$(BOOST_LIB_DIR) 
endif 

LIBPNG_LIB = -lpng
LIBJPEG_LIB = -ljpeg

# Java
CPSEP=:
DEFAULTCLASSPATH=$(CLASSPATH)

# Java ORB
ifeq ("$(JDK_DIR)", "")
 OB_JIDLC		=	idlj
 JAVAC 			= 	javac
 JAR	 		=	jar
else
 OB_JIDLC		=	$(JDK_DIR)/bin/idlj
 JAVAC 			= 	$(JDK_DIR)/bin/javac
 JAR	 		=	$(JDK_DIR)/bin/jar
endif


ifneq ("$(JMFHOME)", "")
	JAVA_EXTDIR_FLAGS:=$(JAVA_EXTDIR_FLAGS)$(JMFHOME)/lib:
endif

ifneq ("$(J3DHOME)", "")
	JAVA_EXTDIR_FLAGS:=$(JAVA_EXTDIR_FLAGS)$(J3DHOME)/lib/ext/:$(J3DHOME)/lib/$(M_ARCHITECTURE):
endif

ifneq ("$(JAVAEXT_DIR)", "")
	JAVA_EXTDIR_FLAGS:=-Djava.ext.dirs=$(JAVA_EXTDIR_FLAGS)$(JAVAEXT_DIR)
else 
  ifneq ("$(JAVA_EXTDIR_FLAGS)","")
	JAVA_EXTDIR_FLAGS:=-Djava.ext.dirs=$(JAVA_EXTDIR_FLAGS)$(JDK_DIR)/jre/lib/ext:$(JDK_DIR)/jre/lib/$(M_ARCHITECTURE)
  endif
endif

ifeq ("$(OSNAME)","Darwin")
	JAVA_EXTRA_FLAGS:=
endif


# makedepend
MAKEDEPEND	= /usr/bin/X11/makedepend

RMDIR		= rm -rf
MKDIR		= mkdir -p
COPY		= cp -f
FPSEP		= /

make_subdirs:
	for i in $(SUBDIRS); do $(MAKE) -C $$i all; done;

clean_subdirs:
	for i in $(SUBDIRS); do $(MAKE) -C $$i clean; done;

#include $(TOP)Make.rules.common
# -*- mode: Makefile -*-

#
# Module directory
#
COMMON			=	$(TOP)Common
COLLISIONDETECTOR	=	$(TOP)CollisionDetector
MODELLOADER		=	$(TOP)ModelLoader
CONTROLLER		=	$(TOP)Controller
DYNAMICSSIMULATOR	=	$(TOP)DynamicsSimulator
VIEWSIMULATOR		=	$(TOP)ViewSimulator
CLIENT			=	$(TOP)client
GRXUI			=	$(TOP)client/gui
BIN			=	$(TOP)bin

#
# Subdirectory
#
CORBA_DIR		=	Corba
SERVER_DIR		=	server
CLIENT_DIR		=	client

#
# Common CORBA directory
#
COMMON_DIR		=	$(COMMON)/$(CORBA_DIR)
IDL_DIR			=	$(TOP)idl/OpenHRP
#
# Java compiler
#
JAVAC_FLAGS		=	-Xlint:unchecked $(JAVA_EXTDIR_FLAGS) 
PACKAGE			=	jp.go.aist.hrp.simulator
PACKAGE_DIR		=	jp/go/aist/hrp/simulator

#
# ORB
#
OB_INCLUDE	= -I$(OB_DIR)/include
#OB_IDL_INCLUDE	= -I$(COMMON_DIR) -I$(VIEWSIMULATOR)/$(CORBA_DIR) -I$(MODELLOADER)/$(CORBA_DIR) \
#		  -I$(COLLISIONDETECTOR)/$(CORBA_DIR) -I$(DYNAMICSSIMULATOR)/$(CORBA_DIR)
OB_IDL_INCLUDE	= -I$(IDL_DIR)
OB_IDL_FLAGS	= -bcxx -Wbh=.h -Wbs=.cpp -Wba -Wbd=DynSK.cpp -Wbtf $(OB_IDL_INCLUDE)
OB_JIDL_FLAGS	= $(OB_IDL_INCLUDE) -fall -pkgTranslate OpenHRP $(PACKAGE)

#
# Other rules
#
.SUFFIXES:
.SUFFIXES: .idl .java .class .cpp .o .c

.c.o:
	$(CXX) $(CXX_FLAGS) $(OBJOPT)$@ $<

.cpp.o:
	$(CXX) $(CXX_FLAGS) $(OBJOPT)$@ $<

.idl.cpp:
	$(OB_IDLC) $(OB_IDL_FLAGS) $<



del_generic:
	-$(RM) *~ *.exp *.lib *.a *.exe *.obj *.o *.so *.dll .depend *.class *.jar *.pdb *.ilk *.manifest *.tmp

#end include $(TOP)Make.rules.common

ifndef IDL_FILE
 IDL_FILE = $(IDL_BASE).idl
endif

ifndef JSTUBDIR
 JSTUBDIR = $(IDL_BASE)
endif

del_stubskel:
	for i in $(IDL_FILE); do $(MAKE) del_stubskel_sub IDL=$$i; done;
	-$(RMDIR) $(JSTUBDIR)

del_stubskel_sub:
	-$(RM) $(IDL:.idl=.h) $(IDL:.idl=.cpp) $(subst .idl,DynSK.cpp,$(IDL))

