// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "PathPlanner.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
OpenHRP::PathPlanner::RoadmapNode::operator>>= (cdrStream &_n) const
{
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(cfg),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      cfg[_0i0] >>= _n;
    }
  }
  (const LongSequence&) neighbors >>= _n;

}

void
OpenHRP::PathPlanner::RoadmapNode::operator<<= (cdrStream &_n)
{
  _n.unmarshalArrayDouble((_CORBA_Double*)(cfg), 3);
  (LongSequence&)neighbors <<= _n;

}

OpenHRP::PathPlanner_ptr OpenHRP::PathPlanner_Helper::_nil() {
  return ::OpenHRP::PathPlanner::_nil();
}

::CORBA::Boolean OpenHRP::PathPlanner_Helper::is_nil(::OpenHRP::PathPlanner_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::PathPlanner_Helper::release(::OpenHRP::PathPlanner_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::PathPlanner_Helper::marshalObjRef(::OpenHRP::PathPlanner_ptr obj, cdrStream& s) {
  ::OpenHRP::PathPlanner::_marshalObjRef(obj, s);
}

OpenHRP::PathPlanner_ptr OpenHRP::PathPlanner_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::PathPlanner::_unmarshalObjRef(s);
}

void OpenHRP::PathPlanner_Helper::duplicate(::OpenHRP::PathPlanner_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::PathPlanner_ptr
OpenHRP::PathPlanner::_duplicate(::OpenHRP::PathPlanner_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::PathPlanner_ptr
OpenHRP::PathPlanner::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::PathPlanner_ptr
OpenHRP::PathPlanner::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::PathPlanner_ptr
OpenHRP::PathPlanner::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PathPlanner _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PathPlanner* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_PathPlanner;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::PathPlanner::_PD_repoId = "IDL:OpenHRP/PathPlanner:1.0";


OpenHRP::_objref_PathPlanner::~_objref_PathPlanner() {
  
}


OpenHRP::_objref_PathPlanner::_objref_PathPlanner(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::PathPlanner::_PD_repoId, ior, id, 1),
   _objref_World(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_PathPlanner::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::PathPlanner::_PD_repoId )
    return (::OpenHRP::PathPlanner_ptr) this;
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::World_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::PathPlanner::_PD_repoId) )
    return (::OpenHRP::PathPlanner_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::World_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_7ff893092e24bfb0_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_7ff893092e24bfb0_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->stopPlanning();


}

void OpenHRP::_objref_PathPlanner::stopPlanning()
{
  _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_10000000, "stopPlanning", 13);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_o_cOpenHRP_mPathPlanner_mRoadmap
class _0RL_cd_7ff893092e24bfb0_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::PathPlanner::Roadmap_var arg_0;
};

void _0RL_cd_7ff893092e24bfb0_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::PathPlanner::Roadmap&) arg_0 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new OpenHRP::PathPlanner::Roadmap;
  (OpenHRP::PathPlanner::Roadmap&)arg_0 <<= _n;

}

const char* const _0RL_cd_7ff893092e24bfb0_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_20000000* tcd = (_0RL_cd_7ff893092e24bfb0_20000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->getRoadmap(tcd->arg_0.out());


}

void OpenHRP::_objref_PathPlanner::getRoadmap(::OpenHRP::PathPlanner::Roadmap_out rdmp)
{
  _0RL_cd_7ff893092e24bfb0_20000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_30000000, "getRoadmap", 11);


  _invoke(_call_desc);
  rdmp = _call_desc.arg_0._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_40000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->clearRoadmap();


}

void OpenHRP::_objref_PathPlanner::clearRoadmap()
{
  _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_40000000, "clearRoadmap", 13);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_o_cOpenHRP_mStringSequence
class _0RL_cd_7ff893092e24bfb0_50000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_50000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::StringSequence_var arg_0;
};

void _0RL_cd_7ff893092e24bfb0_50000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::StringSequence&) arg_0 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_50000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new OpenHRP::StringSequence;
  (OpenHRP::StringSequence&)arg_0 <<= _n;

}

const char* const _0RL_cd_7ff893092e24bfb0_50000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_50000000* tcd = (_0RL_cd_7ff893092e24bfb0_50000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->getMobilityNames(tcd->arg_0.out());


}

void OpenHRP::_objref_PathPlanner::getMobilityNames(::OpenHRP::StringSequence_out mobilities)
{
  _0RL_cd_7ff893092e24bfb0_50000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_60000000, "getMobilityNames", 17);


  _invoke(_call_desc);
  mobilities = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_7ff893092e24bfb0_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_70000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_7ff893092e24bfb0_70000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_7ff893092e24bfb0_70000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_7ff893092e24bfb0_70000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_7ff893092e24bfb0_70000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_7ff893092e24bfb0_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_70000000* tcd = (_0RL_cd_7ff893092e24bfb0_70000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  tcd->result = impl->setMobilityName(tcd->arg_0);


}

::CORBA::Boolean OpenHRP::_objref_PathPlanner::setMobilityName(const char* mobility)
{
  _0RL_cd_7ff893092e24bfb0_70000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_80000000, "setMobilityName", 16);
  _call_desc.arg_0 = mobility;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_50000000* tcd = (_0RL_cd_7ff893092e24bfb0_50000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->getOptimizerNames(tcd->arg_0.out());


}

void OpenHRP::_objref_PathPlanner::getOptimizerNames(::OpenHRP::StringSequence_out optimizers)
{
  _0RL_cd_7ff893092e24bfb0_50000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_90000000, "getOptimizerNames", 18);


  _invoke(_call_desc);
  optimizers = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_7ff893092e24bfb0_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_7ff893092e24bfb0_a0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_7ff893092e24bfb0_a0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_7ff893092e24bfb0_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_a0000000* tcd = (_0RL_cd_7ff893092e24bfb0_a0000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->setRobotName(tcd->arg_0);


}

void OpenHRP::_objref_PathPlanner::setRobotName(const char* model)
{
  _0RL_cd_7ff893092e24bfb0_a0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_b0000000, "setRobotName", 13);
  _call_desc.arg_0 = model;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_a0000000* tcd = (_0RL_cd_7ff893092e24bfb0_a0000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->setAlgorithmName(tcd->arg_0);


}

void OpenHRP::_objref_PathPlanner::setAlgorithmName(const char* name)
{
  _0RL_cd_7ff893092e24bfb0_a0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_c0000000, "setAlgorithmName", 17);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_50000000* tcd = (_0RL_cd_7ff893092e24bfb0_50000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->getAlgorithmNames(tcd->arg_0.out());


}

void OpenHRP::_objref_PathPlanner::getAlgorithmNames(::OpenHRP::StringSequence_out algos)
{
  _0RL_cd_7ff893092e24bfb0_50000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_d0000000, "getAlgorithmNames", 18);


  _invoke(_call_desc);
  algos = _call_desc.arg_0._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_e0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->initPlanner();


}

void OpenHRP::_objref_PathPlanner::initPlanner()
{
  _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_e0000000, "initPlanner", 12);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cdouble_i_cdouble_i_cdouble
class _0RL_cd_7ff893092e24bfb0_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
};

void _0RL_cd_7ff893092e24bfb0_f0000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_f0000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;

}

const char* const _0RL_cd_7ff893092e24bfb0_f0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_f0000000* tcd = (_0RL_cd_7ff893092e24bfb0_f0000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->setStartPosition(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void OpenHRP::_objref_PathPlanner::setStartPosition(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double theta)
{
  _0RL_cd_7ff893092e24bfb0_f0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_01000000, "setStartPosition", 17);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;
  _call_desc.arg_2 = theta;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_f0000000* tcd = (_0RL_cd_7ff893092e24bfb0_f0000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->setGoalPosition(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void OpenHRP::_objref_PathPlanner::setGoalPosition(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double theta)
{
  _0RL_cd_7ff893092e24bfb0_f0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_11000000, "setGoalPosition", 16);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;
  _call_desc.arg_2 = theta;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_o_cOpenHRP_mStringSequence_o_cOpenHRP_mStringSequence
class _0RL_cd_7ff893092e24bfb0_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::StringSequence_var arg_1;
  OpenHRP::StringSequence_var arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_7ff893092e24bfb0_21000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_7ff893092e24bfb0_21000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_7ff893092e24bfb0_21000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const OpenHRP::StringSequence&) arg_1 >>= _n;
  (const OpenHRP::StringSequence&) arg_2 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_21000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new OpenHRP::StringSequence;
  (OpenHRP::StringSequence&)arg_1 <<= _n;
  arg_2 = new OpenHRP::StringSequence;
  (OpenHRP::StringSequence&)arg_2 <<= _n;

}

const char* const _0RL_cd_7ff893092e24bfb0_21000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_21000000* tcd = (_0RL_cd_7ff893092e24bfb0_21000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  tcd->result = impl->getProperties(tcd->arg_0, tcd->arg_1.out(), tcd->arg_2.out());


}

::CORBA::Boolean OpenHRP::_objref_PathPlanner::getProperties(const char* alg, ::OpenHRP::StringSequence_out props, ::OpenHRP::StringSequence_out defaults)
{
  _0RL_cd_7ff893092e24bfb0_21000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_31000000, "getProperties", 14);
  _call_desc.arg_0 = alg;

  _invoke(_call_desc);
  props = _call_desc.arg_1._retn();
  defaults = _call_desc.arg_2._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cOpenHRP_mPathPlanner_mProperty
class _0RL_cd_7ff893092e24bfb0_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  OpenHRP::PathPlanner::Property_var arg_0_;
  const OpenHRP::PathPlanner::Property* arg_0;
};

void _0RL_cd_7ff893092e24bfb0_41000000::marshalArguments(cdrStream& _n)
{
  (const OpenHRP::PathPlanner::Property&) *arg_0 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_41000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new OpenHRP::PathPlanner::Property;
  (OpenHRP::PathPlanner::Property&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_7ff893092e24bfb0_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_41000000* tcd = (_0RL_cd_7ff893092e24bfb0_41000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->setProperties(*tcd->arg_0);


}

void OpenHRP::_objref_PathPlanner::setProperties(const ::OpenHRP::PathPlanner::Property& properties)
{
  _0RL_cd_7ff893092e24bfb0_41000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_51000000, "setProperties", 14);
  _call_desc.arg_0 = &(::OpenHRP::PathPlanner::Property&) properties;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_7ff893092e24bfb0_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_7ff893092e24bfb0_61000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_7ff893092e24bfb0_61000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_7ff893092e24bfb0_61000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_61000000* tcd = (_0RL_cd_7ff893092e24bfb0_61000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  tcd->result = impl->calcPath();


}

::CORBA::Boolean OpenHRP::_objref_PathPlanner::calcPath()
{
  _0RL_cd_7ff893092e24bfb0_61000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_71000000, "calcPath", 9);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_o_cOpenHRP_mPathPlanner_mPointArray
class _0RL_cd_7ff893092e24bfb0_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::PathPlanner::PointArray_var arg_0;
};

void _0RL_cd_7ff893092e24bfb0_81000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::PathPlanner::PointArray&) arg_0 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new OpenHRP::PathPlanner::PointArray;
  (OpenHRP::PathPlanner::PointArray&)arg_0 <<= _n;

}

const char* const _0RL_cd_7ff893092e24bfb0_81000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_81000000* tcd = (_0RL_cd_7ff893092e24bfb0_81000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->getPath(tcd->arg_0.out());


}

void OpenHRP::_objref_PathPlanner::getPath(::OpenHRP::PathPlanner::PointArray_out path)
{
  _0RL_cd_7ff893092e24bfb0_81000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_91000000, "getPath", 8);


  _invoke(_call_desc);
  path = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cstring_i_cstring_i_cdouble
class _0RL_cd_7ff893092e24bfb0_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_a1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::String_var arg_3_;
  const char* arg_3;
  ::CORBA::Double arg_4;
};

void _0RL_cd_7ff893092e24bfb0_a1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);
  _n.marshalString(arg_3,0);
  arg_4 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_a1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalString(0);
  arg_3 = arg_3_.in();
  (::CORBA::Double&)arg_4 <<= _n;

}

const char* const _0RL_cd_7ff893092e24bfb0_a1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_a1000000* tcd = (_0RL_cd_7ff893092e24bfb0_a1000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->registerIntersectionCheckPair(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

void OpenHRP::_objref_PathPlanner::registerIntersectionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double tolerance)
{
  _0RL_cd_7ff893092e24bfb0_a1000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_b1000000, "registerIntersectionCheckPair", 30);
  _call_desc.arg_0 = char1;
  _call_desc.arg_1 = name1;
  _call_desc.arg_2 = char2;
  _call_desc.arg_3 = name2;
  _call_desc.arg_4 = tolerance;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring
class _0RL_cd_7ff893092e24bfb0_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_7ff893092e24bfb0_c1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_7ff893092e24bfb0_c1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_7ff893092e24bfb0_c1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_c1000000* tcd = (_0RL_cd_7ff893092e24bfb0_c1000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->registerCharacterByURL(tcd->arg_0, tcd->arg_1);


}

void OpenHRP::_objref_PathPlanner::registerCharacterByURL(const char* name, const char* url)
{
  _0RL_cd_7ff893092e24bfb0_c1000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_d1000000, "registerCharacterByURL", 23);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = url;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cOpenHRP_mDblSequence
class _0RL_cd_7ff893092e24bfb0_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_7ff893092e24bfb0_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::DblSequence_var arg_1_;
  const OpenHRP::DblSequence* arg_1;
};

void _0RL_cd_7ff893092e24bfb0_e1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const OpenHRP::DblSequence&) *arg_1 >>= _n;

}

void _0RL_cd_7ff893092e24bfb0_e1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_7ff893092e24bfb0_e1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_e1000000* tcd = (_0RL_cd_7ff893092e24bfb0_e1000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->setCharacterPosition(tcd->arg_0, *tcd->arg_1);


}

void OpenHRP::_objref_PathPlanner::setCharacterPosition(const char* character, const ::OpenHRP::DblSequence& pos)
{
  _0RL_cd_7ff893092e24bfb0_e1000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_f1000000, "setCharacterPosition", 21);
  _call_desc.arg_0 = character;
  _call_desc.arg_1 = &(::OpenHRP::DblSequence&) pos;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_02000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  impl->initSimulation();


}

void OpenHRP::_objref_PathPlanner::initSimulation()
{
  _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_02000000, "initSimulation", 15);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_7ff893092e24bfb0_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_7ff893092e24bfb0_70000000* tcd = (_0RL_cd_7ff893092e24bfb0_70000000*)cd;
  OpenHRP::_impl_PathPlanner* impl = (OpenHRP::_impl_PathPlanner*) svnt->_ptrToInterface(OpenHRP::PathPlanner::_PD_repoId);
  tcd->result = impl->optimize(tcd->arg_0);


}

::CORBA::Boolean OpenHRP::_objref_PathPlanner::optimize(const char* optimizer)
{
  _0RL_cd_7ff893092e24bfb0_70000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_12000000, "optimize", 9);
  _call_desc.arg_0 = optimizer;

  _invoke(_call_desc);
  return _call_desc.result;


}
OpenHRP::_pof_PathPlanner::~_pof_PathPlanner() {}


omniObjRef*
OpenHRP::_pof_PathPlanner::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_PathPlanner(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_PathPlanner::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::PathPlanner::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::World::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_PathPlanner _the_pof_OpenHRP_mPathPlanner;

OpenHRP::_impl_PathPlanner::~_impl_PathPlanner() {}


::CORBA::Boolean
OpenHRP::_impl_PathPlanner::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "stopPlanning") ) {

    _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_10000000, "stopPlanning", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRoadmap") ) {

    _0RL_cd_7ff893092e24bfb0_20000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_30000000, "getRoadmap", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clearRoadmap") ) {

    _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_40000000, "clearRoadmap", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getMobilityNames") ) {

    _0RL_cd_7ff893092e24bfb0_50000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_60000000, "getMobilityNames", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setMobilityName") ) {

    _0RL_cd_7ff893092e24bfb0_70000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_80000000, "setMobilityName", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getOptimizerNames") ) {

    _0RL_cd_7ff893092e24bfb0_50000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_90000000, "getOptimizerNames", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setRobotName") ) {

    _0RL_cd_7ff893092e24bfb0_a0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_b0000000, "setRobotName", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setAlgorithmName") ) {

    _0RL_cd_7ff893092e24bfb0_a0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_c0000000, "setAlgorithmName", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAlgorithmNames") ) {

    _0RL_cd_7ff893092e24bfb0_50000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_d0000000, "getAlgorithmNames", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "initPlanner") ) {

    _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_e0000000, "initPlanner", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setStartPosition") ) {

    _0RL_cd_7ff893092e24bfb0_f0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_01000000, "setStartPosition", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setGoalPosition") ) {

    _0RL_cd_7ff893092e24bfb0_f0000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_11000000, "setGoalPosition", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getProperties") ) {

    _0RL_cd_7ff893092e24bfb0_21000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_31000000, "getProperties", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setProperties") ) {

    _0RL_cd_7ff893092e24bfb0_41000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_51000000, "setProperties", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "calcPath") ) {

    _0RL_cd_7ff893092e24bfb0_61000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_71000000, "calcPath", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPath") ) {

    _0RL_cd_7ff893092e24bfb0_81000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_91000000, "getPath", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerIntersectionCheckPair") ) {

    _0RL_cd_7ff893092e24bfb0_a1000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_b1000000, "registerIntersectionCheckPair", 30, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerCharacterByURL") ) {

    _0RL_cd_7ff893092e24bfb0_c1000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_d1000000, "registerCharacterByURL", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setCharacterPosition") ) {

    _0RL_cd_7ff893092e24bfb0_e1000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_f1000000, "setCharacterPosition", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "initSimulation") ) {

    _0RL_cd_7ff893092e24bfb0_00000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_02000000, "initSimulation", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "optimize") ) {

    _0RL_cd_7ff893092e24bfb0_70000000 _call_desc(_0RL_lcfn_7ff893092e24bfb0_12000000, "optimize", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_World::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_World*)this)->
      _impl_World::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_PathPlanner::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::PathPlanner::_PD_repoId )
    return (::OpenHRP::_impl_PathPlanner*) this;
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::_impl_World*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::PathPlanner::_PD_repoId) )
    return (::OpenHRP::_impl_PathPlanner*) this;
  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::_impl_World*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_PathPlanner::_mostDerivedRepoId()
{
  return ::OpenHRP::PathPlanner::_PD_repoId;
}

POA_OpenHRP::PathPlanner::~PathPlanner() {}

