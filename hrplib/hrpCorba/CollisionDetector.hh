// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __CollisionDetector_hh__
#define __CollisionDetector_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include "OpenHRPCommon.hh"
#endif
#ifndef __ModelLoader_hh_EXTERNAL_GUARD__
#define __ModelLoader_hh_EXTERNAL_GUARD__
#include "ModelLoader.hh"
#endif
#ifndef __World_hh_EXTERNAL_GUARD__
#define __World_hh_EXTERNAL_GUARD__
#include "World.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE OpenHRP

_CORBA_MODULE_BEG

#ifndef __OpenHRP_mCollisionDetector__
#define __OpenHRP_mCollisionDetector__

  class CollisionDetector;
  class _objref_CollisionDetector;
  class _impl_CollisionDetector;
  
  typedef _objref_CollisionDetector* CollisionDetector_ptr;
  typedef CollisionDetector_ptr CollisionDetectorRef;

  class CollisionDetector_Helper {
  public:
    typedef CollisionDetector_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_CollisionDetector, CollisionDetector_Helper> CollisionDetector_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_CollisionDetector,CollisionDetector_Helper > CollisionDetector_out;

#endif

  // interface CollisionDetector
  class CollisionDetector {
  public:
    // Declarations for this interface type.
    typedef CollisionDetector_ptr _ptr_type;
    typedef CollisionDetector_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_CollisionDetector :
    public virtual _objref_World
  {
  public:
    void destroy();
    void addCollisionPair(const ::OpenHRP::LinkPair& collisionPair);
    ::CORBA::Boolean queryIntersectionForDefinedPairs(::CORBA::Boolean checkAll, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::LinkPairSequence_out collidedPairs);
    ::CORBA::Boolean queryIntersectionForGivenPairs(::CORBA::Boolean checkAll, const ::OpenHRP::LinkPairSequence& checkPairs, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::LinkPairSequence_out collidedPairs);
    ::CORBA::Boolean queryContactDeterminationForDefinedPairs(const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::CollisionSequence_out collisions);
    ::CORBA::Boolean queryContactDeterminationForGivenPairs(const ::OpenHRP::LinkPairSequence& checkPairs, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::CollisionSequence_out collisions);
    void queryDistanceForDefinedPairs(const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::DistanceSequence_out distances);
    void queryDistanceForGivenPairs(const ::OpenHRP::LinkPairSequence& checkPairs, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::DistanceSequence_out distances);
    ::CORBA::Double queryDistanceWithRay(const ::OpenHRP::DblArray3 point, const ::OpenHRP::DblArray3 dir);
    DblSequence* scanDistanceWithRay(const ::OpenHRP::DblArray3 p, const ::OpenHRP::DblArray9 R, ::CORBA::Double step, ::CORBA::Double range);

    inline _objref_CollisionDetector()  { _PR_setobj(0); }  // nil
    _objref_CollisionDetector(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_CollisionDetector();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_CollisionDetector(const _objref_CollisionDetector&);
    _objref_CollisionDetector& operator = (const _objref_CollisionDetector&);
    // not implemented

    friend class CollisionDetector;
  };

  class _pof_CollisionDetector : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_CollisionDetector() : _OMNI_NS(proxyObjectFactory)(CollisionDetector::_PD_repoId) {}
    virtual ~_pof_CollisionDetector();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_CollisionDetector :
    public virtual _impl_World
  {
  public:
    virtual ~_impl_CollisionDetector();

    virtual void destroy() = 0;
    virtual void addCollisionPair(const ::OpenHRP::LinkPair& collisionPair) = 0;
    virtual ::CORBA::Boolean queryIntersectionForDefinedPairs(::CORBA::Boolean checkAll, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::LinkPairSequence_out collidedPairs) = 0;
    virtual ::CORBA::Boolean queryIntersectionForGivenPairs(::CORBA::Boolean checkAll, const ::OpenHRP::LinkPairSequence& checkPairs, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::LinkPairSequence_out collidedPairs) = 0;
    virtual ::CORBA::Boolean queryContactDeterminationForDefinedPairs(const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::CollisionSequence_out collisions) = 0;
    virtual ::CORBA::Boolean queryContactDeterminationForGivenPairs(const ::OpenHRP::LinkPairSequence& checkPairs, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::CollisionSequence_out collisions) = 0;
    virtual void queryDistanceForDefinedPairs(const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::DistanceSequence_out distances) = 0;
    virtual void queryDistanceForGivenPairs(const ::OpenHRP::LinkPairSequence& checkPairs, const ::OpenHRP::CharacterPositionSequence& positions, ::OpenHRP::DistanceSequence_out distances) = 0;
    virtual ::CORBA::Double queryDistanceWithRay(const ::OpenHRP::DblArray3 point, const ::OpenHRP::DblArray3 dir) = 0;
    virtual DblSequence* scanDistanceWithRay(const ::OpenHRP::DblArray3 p, const ::OpenHRP::DblArray9 R, ::CORBA::Double step, ::CORBA::Double range) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __OpenHRP_mCollisionDetectorFactory__
#define __OpenHRP_mCollisionDetectorFactory__

  class CollisionDetectorFactory;
  class _objref_CollisionDetectorFactory;
  class _impl_CollisionDetectorFactory;
  
  typedef _objref_CollisionDetectorFactory* CollisionDetectorFactory_ptr;
  typedef CollisionDetectorFactory_ptr CollisionDetectorFactoryRef;

  class CollisionDetectorFactory_Helper {
  public:
    typedef CollisionDetectorFactory_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_CollisionDetectorFactory, CollisionDetectorFactory_Helper> CollisionDetectorFactory_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_CollisionDetectorFactory,CollisionDetectorFactory_Helper > CollisionDetectorFactory_out;

#endif

  // interface CollisionDetectorFactory
  class CollisionDetectorFactory {
  public:
    // Declarations for this interface type.
    typedef CollisionDetectorFactory_ptr _ptr_type;
    typedef CollisionDetectorFactory_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_CollisionDetectorFactory :
    public virtual _objref_ServerObject
  {
  public:
    CollisionDetector_ptr create();

    inline _objref_CollisionDetectorFactory()  { _PR_setobj(0); }  // nil
    _objref_CollisionDetectorFactory(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_CollisionDetectorFactory();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_CollisionDetectorFactory(const _objref_CollisionDetectorFactory&);
    _objref_CollisionDetectorFactory& operator = (const _objref_CollisionDetectorFactory&);
    // not implemented

    friend class CollisionDetectorFactory;
  };

  class _pof_CollisionDetectorFactory : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_CollisionDetectorFactory() : _OMNI_NS(proxyObjectFactory)(CollisionDetectorFactory::_PD_repoId) {}
    virtual ~_pof_CollisionDetectorFactory();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_CollisionDetectorFactory :
    public virtual _impl_ServerObject
  {
  public:
    virtual ~_impl_CollisionDetectorFactory();

    virtual CollisionDetector_ptr create() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_OpenHRP
_CORBA_MODULE_BEG

  class CollisionDetector :
    public virtual OpenHRP::_impl_CollisionDetector,
    public virtual World
  {
  public:
    virtual ~CollisionDetector();

    inline ::OpenHRP::CollisionDetector_ptr _this() {
      return (::OpenHRP::CollisionDetector_ptr) _do_this(::OpenHRP::CollisionDetector::_PD_repoId);
    }
  };

  class CollisionDetectorFactory :
    public virtual OpenHRP::_impl_CollisionDetectorFactory,
    public virtual ServerObject
  {
  public:
    virtual ~CollisionDetectorFactory();

    inline ::OpenHRP::CollisionDetectorFactory_ptr _this() {
      return (::OpenHRP::CollisionDetectorFactory_ptr) _do_this(::OpenHRP::CollisionDetectorFactory::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenHRP
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
OpenHRP::CollisionDetector::_marshalObjRef(::OpenHRP::CollisionDetector_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
OpenHRP::CollisionDetectorFactory::_marshalObjRef(::OpenHRP::CollisionDetectorFactory_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CollisionDetector
#endif

#endif  // __CollisionDetector_hh__

