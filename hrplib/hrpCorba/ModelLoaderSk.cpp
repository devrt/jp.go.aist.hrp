// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "ModelLoader.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
OpenHRP::TransformedShapeIndex::operator>>= (cdrStream &_n) const
{
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(transformMatrix),96,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 96);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 12; _0i0++){
      transformMatrix[_0i0] >>= _n;
    }
  }
  inlinedShapeTransformMatrixIndex >>= _n;
  shapeIndex >>= _n;

}

void
OpenHRP::TransformedShapeIndex::operator<<= (cdrStream &_n)
{
  _n.unmarshalArrayDouble((_CORBA_Double*)(transformMatrix), 12);
  (::CORBA::Short&)inlinedShapeTransformMatrixIndex <<= _n;
  (::CORBA::Short&)shapeIndex <<= _n;

}

void
OpenHRP::SensorInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(type,0);
  _n.marshalString(name,0);
  id >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(translation),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      translation[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(rotation),32,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 32);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      rotation[_0i0] >>= _n;
    }
  }
  (const FloatSequence&) specValues >>= _n;
  _n.marshalString(specFile,0);
  (const TransformedShapeIndexSequence&) shapeIndices >>= _n;
  (const DblArray12Sequence&) inlinedShapeTransformMatrices >>= _n;

}

void
OpenHRP::SensorInfo::operator<<= (cdrStream &_n)
{
  type = _n.unmarshalString(0);
  name = _n.unmarshalString(0);
  (::CORBA::Long&)id <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(translation), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(rotation), 4);
  (FloatSequence&)specValues <<= _n;
  specFile = _n.unmarshalString(0);
  (TransformedShapeIndexSequence&)shapeIndices <<= _n;
  (DblArray12Sequence&)inlinedShapeTransformMatrices <<= _n;

}

void
OpenHRP::HwcInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  id >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(translation),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      translation[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(rotation),32,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 32);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      rotation[_0i0] >>= _n;
    }
  }
  _n.marshalString(url,0);
  (const TransformedShapeIndexSequence&) shapeIndices >>= _n;
  (const DblArray12Sequence&) inlinedShapeTransformMatrices >>= _n;

}

void
OpenHRP::HwcInfo::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (::CORBA::Long&)id <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(translation), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(rotation), 4);
  url = _n.unmarshalString(0);
  (TransformedShapeIndexSequence&)shapeIndices <<= _n;
  (DblArray12Sequence&)inlinedShapeTransformMatrices <<= _n;

}

void
OpenHRP::LightInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  type >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(transformMatrix),96,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 96);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 12; _0i0++){
      transformMatrix[_0i0] >>= _n;
    }
  }
  ambientIntensity >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(attenuation),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      attenuation[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(color),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      color[_0i0] >>= _n;
    }
  }
  intensity >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(location),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      location[_0i0] >>= _n;
    }
  }
  _n.marshalBoolean(on);
  radius >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(direction),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      direction[_0i0] >>= _n;
    }
  }
  beamWidth >>= _n;
  cutOffAngle >>= _n;

}

void
OpenHRP::LightInfo::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (LightType&)type <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(transformMatrix), 12);
  (::CORBA::Double&)ambientIntensity <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(attenuation), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(color), 3);
  (::CORBA::Double&)intensity <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(location), 3);
  on = _n.unmarshalBoolean();
  (::CORBA::Double&)radius <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(direction), 3);
  (::CORBA::Double&)beamWidth <<= _n;
  (::CORBA::Double&)cutOffAngle <<= _n;

}

void
OpenHRP::SegmentInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  mass >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(centerOfMass),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      centerOfMass[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(inertia),72,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 72);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 9; _0i0++){
      inertia[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(transformMatrix),96,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 96);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 12; _0i0++){
      transformMatrix[_0i0] >>= _n;
    }
  }
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > &) shapeIndices >>= _n;

}

void
OpenHRP::SegmentInfo::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (::CORBA::Double&)mass <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(centerOfMass), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(inertia), 9);
  _n.unmarshalArrayDouble((_CORBA_Double*)(transformMatrix), 12);
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Short, 2, 2 > &)shapeIndices <<= _n;

}

void
OpenHRP::LinkInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  jointId >>= _n;
  _n.marshalString(jointType,0);
  jointValue >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(jointAxis),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      jointAxis[_0i0] >>= _n;
    }
  }
  (const DblSequence&) ulimit >>= _n;
  (const DblSequence&) llimit >>= _n;
  (const DblSequence&) uvlimit >>= _n;
  (const DblSequence&) lvlimit >>= _n;
  (const DblSequence&) tlimit >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(translation),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      translation[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(rotation),32,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 32);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 4; _0i0++){
      rotation[_0i0] >>= _n;
    }
  }
  mass >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(centerOfMass),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      centerOfMass[_0i0] >>= _n;
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(inertia),72,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 72);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 9; _0i0++){
      inertia[_0i0] >>= _n;
    }
  }
  rotorInertia >>= _n;
  rotorResistor >>= _n;
  gearRatio >>= _n;
  torqueConst >>= _n;
  encoderPulse >>= _n;
  parentIndex >>= _n;
  (const ShortSequence&) childIndices >>= _n;
  (const TransformedShapeIndexSequence&) shapeIndices >>= _n;
  AABBmaxDepth >>= _n;
  AABBmaxNum >>= _n;
  (const DblArray12Sequence&) inlinedShapeTransformMatrices >>= _n;
  (const SensorInfoSequence&) sensors >>= _n;
  (const HwcInfoSequence&) hwcs >>= _n;
  (const SegmentInfoSequence&) segments >>= _n;
  (const LightInfoSequence&) lights >>= _n;
  (const StringSequence&) specFiles >>= _n;

}

void
OpenHRP::LinkInfo::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (::CORBA::Short&)jointId <<= _n;
  jointType = _n.unmarshalString(0);
  (::CORBA::Double&)jointValue <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(jointAxis), 3);
  (DblSequence&)ulimit <<= _n;
  (DblSequence&)llimit <<= _n;
  (DblSequence&)uvlimit <<= _n;
  (DblSequence&)lvlimit <<= _n;
  (DblSequence&)tlimit <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(translation), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(rotation), 4);
  (::CORBA::Double&)mass <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(centerOfMass), 3);
  _n.unmarshalArrayDouble((_CORBA_Double*)(inertia), 9);
  (::CORBA::Double&)rotorInertia <<= _n;
  (::CORBA::Double&)rotorResistor <<= _n;
  (::CORBA::Double&)gearRatio <<= _n;
  (::CORBA::Double&)torqueConst <<= _n;
  (::CORBA::Double&)encoderPulse <<= _n;
  (::CORBA::Short&)parentIndex <<= _n;
  (ShortSequence&)childIndices <<= _n;
  (TransformedShapeIndexSequence&)shapeIndices <<= _n;
  (::CORBA::Short&)AABBmaxDepth <<= _n;
  (::CORBA::Short&)AABBmaxNum <<= _n;
  (DblArray12Sequence&)inlinedShapeTransformMatrices <<= _n;
  (SensorInfoSequence&)sensors <<= _n;
  (HwcInfoSequence&)hwcs <<= _n;
  (SegmentInfoSequence&)segments <<= _n;
  (LightInfoSequence&)lights <<= _n;
  (StringSequence&)specFiles <<= _n;

}

void
OpenHRP::ShapeInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(url,0);
  primitiveType >>= _n;
  (const FloatSequence&) primitiveParameters >>= _n;
  (const FloatSequence&) vertices >>= _n;
  (const LongSequence&) triangles >>= _n;
  appearanceIndex >>= _n;

}

void
OpenHRP::ShapeInfo::operator<<= (cdrStream &_n)
{
  url = _n.unmarshalString(0);
  (ShapePrimitiveType&)primitiveType <<= _n;
  (FloatSequence&)primitiveParameters <<= _n;
  (FloatSequence&)vertices <<= _n;
  (LongSequence&)triangles <<= _n;
  (::CORBA::Long&)appearanceIndex <<= _n;

}

void
OpenHRP::AppearanceInfo::operator>>= (cdrStream &_n) const
{
  materialIndex >>= _n;
  (const FloatSequence&) normals >>= _n;
  (const LongSequence&) normalIndices >>= _n;
  _n.marshalBoolean(normalPerVertex);
  _n.marshalBoolean(solid);
  creaseAngle >>= _n;
  (const FloatSequence&) colors >>= _n;
  (const LongSequence&) colorIndices >>= _n;
  _n.marshalBoolean(colorPerVertex);
  textureIndex >>= _n;
  (const FloatSequence&) textureCoordinate >>= _n;
  (const LongSequence&) textureCoordIndices >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(textransformMatrix),72,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 72);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 9; _0i0++){
      textransformMatrix[_0i0] >>= _n;
    }
  }

}

void
OpenHRP::AppearanceInfo::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)materialIndex <<= _n;
  (FloatSequence&)normals <<= _n;
  (LongSequence&)normalIndices <<= _n;
  normalPerVertex = _n.unmarshalBoolean();
  solid = _n.unmarshalBoolean();
  (::CORBA::Float&)creaseAngle <<= _n;
  (FloatSequence&)colors <<= _n;
  (LongSequence&)colorIndices <<= _n;
  colorPerVertex = _n.unmarshalBoolean();
  (::CORBA::Long&)textureIndex <<= _n;
  (FloatSequence&)textureCoordinate <<= _n;
  (LongSequence&)textureCoordIndices <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(textransformMatrix), 9);

}

void
OpenHRP::MaterialInfo::operator>>= (cdrStream &_n) const
{
  ambientIntensity >>= _n;
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(diffuseColor),12,omni::ALIGN_4);
  }
  else 
  {
    _n.declareArrayLength(omni::ALIGN_4, 12);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      diffuseColor[_0i0] >>= _n;
    }
  }
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(emissiveColor),12,omni::ALIGN_4);
  }
  else 
  {
    _n.declareArrayLength(omni::ALIGN_4, 12);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      emissiveColor[_0i0] >>= _n;
    }
  }
  shininess >>= _n;
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(specularColor),12,omni::ALIGN_4);
  }
  else 
  {
    _n.declareArrayLength(omni::ALIGN_4, 12);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      specularColor[_0i0] >>= _n;
    }
  }
  transparency >>= _n;

}

void
OpenHRP::MaterialInfo::operator<<= (cdrStream &_n)
{
  (::CORBA::Float&)ambientIntensity <<= _n;
  _n.unmarshalArrayFloat((_CORBA_Float*)(diffuseColor), 3);
  _n.unmarshalArrayFloat((_CORBA_Float*)(emissiveColor), 3);
  (::CORBA::Float&)shininess <<= _n;
  _n.unmarshalArrayFloat((_CORBA_Float*)(specularColor), 3);
  (::CORBA::Float&)transparency <<= _n;

}

void
OpenHRP::TextureInfo::operator>>= (cdrStream &_n) const
{
  (const OctetSequence&) image >>= _n;
  numComponents >>= _n;
  width >>= _n;
  height >>= _n;
  _n.marshalBoolean(repeatS);
  _n.marshalBoolean(repeatT);
  _n.marshalString(url,0);

}

void
OpenHRP::TextureInfo::operator<<= (cdrStream &_n)
{
  (OctetSequence&)image <<= _n;
  (::CORBA::Short&)numComponents <<= _n;
  (::CORBA::Short&)width <<= _n;
  (::CORBA::Short&)height <<= _n;
  repeatS = _n.unmarshalBoolean();
  repeatT = _n.unmarshalBoolean();
  url = _n.unmarshalString(0);

}

void
OpenHRP::ExtraJointInfo::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  jointType >>= _n;
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(axis),24,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 24);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 3; _0i0++){
      axis[_0i0] >>= _n;
    }
  }
  {
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      _n.marshalString(link[_0i0],0);
    }
  }
  
#ifndef OMNI_MIXED_ENDIAN_DOUBLE
  if (! _n.marshal_byte_swap()) {
    _n.put_octet_array((_CORBA_Octet*)(point),48,omni::ALIGN_8);
  }
  else 
#endif
  {
    _n.declareArrayLength(omni::ALIGN_8, 48);
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      for (_CORBA_ULong _0i1 = 0; _0i1 < 3; _0i1++){
        point[_0i0][_0i1] >>= _n;
      }
    }
  }

}

void
OpenHRP::ExtraJointInfo::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (ExtraJointType&)jointType <<= _n;
  _n.unmarshalArrayDouble((_CORBA_Double*)(axis), 3);
  {
    for (_CORBA_ULong _0i0 = 0; _0i0 < 2; _0i0++){
      link[_0i0] = _n.unmarshalString(0);
    }
  }
  _n.unmarshalArrayDouble((_CORBA_Double*)(point), 6);

}

OpenHRP::ShapeSetInfo_ptr OpenHRP::ShapeSetInfo_Helper::_nil() {
  return ::OpenHRP::ShapeSetInfo::_nil();
}

::CORBA::Boolean OpenHRP::ShapeSetInfo_Helper::is_nil(::OpenHRP::ShapeSetInfo_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::ShapeSetInfo_Helper::release(::OpenHRP::ShapeSetInfo_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::ShapeSetInfo_Helper::marshalObjRef(::OpenHRP::ShapeSetInfo_ptr obj, cdrStream& s) {
  ::OpenHRP::ShapeSetInfo::_marshalObjRef(obj, s);
}

OpenHRP::ShapeSetInfo_ptr OpenHRP::ShapeSetInfo_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::ShapeSetInfo::_unmarshalObjRef(s);
}

void OpenHRP::ShapeSetInfo_Helper::duplicate(::OpenHRP::ShapeSetInfo_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::ShapeSetInfo_ptr
OpenHRP::ShapeSetInfo::_duplicate(::OpenHRP::ShapeSetInfo_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::ShapeSetInfo_ptr
OpenHRP::ShapeSetInfo::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::ShapeSetInfo_ptr
OpenHRP::ShapeSetInfo::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::ShapeSetInfo_ptr
OpenHRP::ShapeSetInfo::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ShapeSetInfo _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ShapeSetInfo* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ShapeSetInfo;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::ShapeSetInfo::_PD_repoId = "IDL:OpenHRP/ShapeSetInfo:1.0";


OpenHRP::_objref_ShapeSetInfo::~_objref_ShapeSetInfo() {
  
}


OpenHRP::_objref_ShapeSetInfo::_objref_ShapeSetInfo(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::ShapeSetInfo::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_ShapeSetInfo::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::ShapeSetInfo::_PD_repoId )
    return (::OpenHRP::ShapeSetInfo_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::ShapeSetInfo::_PD_repoId) )
    return (::OpenHRP::ShapeSetInfo_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mShapeInfoSequence
class _0RL_cd_474383644c7db81e_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::ShapeInfoSequence_var result;
};

void _0RL_cd_474383644c7db81e_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::ShapeInfoSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::ShapeInfoSequence;
  (OpenHRP::ShapeInfoSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_00000000* tcd = (_0RL_cd_474383644c7db81e_00000000*)cd;
  OpenHRP::_impl_ShapeSetInfo* impl = (OpenHRP::_impl_ShapeSetInfo*) svnt->_ptrToInterface(OpenHRP::ShapeSetInfo::_PD_repoId);
  tcd->result = impl->shapes();


}

OpenHRP::ShapeInfoSequence* OpenHRP::_objref_ShapeSetInfo::shapes()
{
  _0RL_cd_474383644c7db81e_00000000 _call_desc(_0RL_lcfn_474383644c7db81e_10000000, "_get_shapes", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mAppearanceInfoSequence
class _0RL_cd_474383644c7db81e_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::AppearanceInfoSequence_var result;
};

void _0RL_cd_474383644c7db81e_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::AppearanceInfoSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::AppearanceInfoSequence;
  (OpenHRP::AppearanceInfoSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_20000000* tcd = (_0RL_cd_474383644c7db81e_20000000*)cd;
  OpenHRP::_impl_ShapeSetInfo* impl = (OpenHRP::_impl_ShapeSetInfo*) svnt->_ptrToInterface(OpenHRP::ShapeSetInfo::_PD_repoId);
  tcd->result = impl->appearances();


}

OpenHRP::AppearanceInfoSequence* OpenHRP::_objref_ShapeSetInfo::appearances()
{
  _0RL_cd_474383644c7db81e_20000000 _call_desc(_0RL_lcfn_474383644c7db81e_30000000, "_get_appearances", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mMaterialInfoSequence
class _0RL_cd_474383644c7db81e_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::MaterialInfoSequence_var result;
};

void _0RL_cd_474383644c7db81e_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::MaterialInfoSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::MaterialInfoSequence;
  (OpenHRP::MaterialInfoSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_40000000* tcd = (_0RL_cd_474383644c7db81e_40000000*)cd;
  OpenHRP::_impl_ShapeSetInfo* impl = (OpenHRP::_impl_ShapeSetInfo*) svnt->_ptrToInterface(OpenHRP::ShapeSetInfo::_PD_repoId);
  tcd->result = impl->materials();


}

OpenHRP::MaterialInfoSequence* OpenHRP::_objref_ShapeSetInfo::materials()
{
  _0RL_cd_474383644c7db81e_40000000 _call_desc(_0RL_lcfn_474383644c7db81e_50000000, "_get_materials", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mTextureInfoSequence
class _0RL_cd_474383644c7db81e_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::TextureInfoSequence_var result;
};

void _0RL_cd_474383644c7db81e_60000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::TextureInfoSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::TextureInfoSequence;
  (OpenHRP::TextureInfoSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_60000000* tcd = (_0RL_cd_474383644c7db81e_60000000*)cd;
  OpenHRP::_impl_ShapeSetInfo* impl = (OpenHRP::_impl_ShapeSetInfo*) svnt->_ptrToInterface(OpenHRP::ShapeSetInfo::_PD_repoId);
  tcd->result = impl->textures();


}

OpenHRP::TextureInfoSequence* OpenHRP::_objref_ShapeSetInfo::textures()
{
  _0RL_cd_474383644c7db81e_60000000 _call_desc(_0RL_lcfn_474383644c7db81e_70000000, "_get_textures", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
OpenHRP::_pof_ShapeSetInfo::~_pof_ShapeSetInfo() {}


omniObjRef*
OpenHRP::_pof_ShapeSetInfo::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_ShapeSetInfo(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_ShapeSetInfo::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::ShapeSetInfo::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_ShapeSetInfo _the_pof_OpenHRP_mShapeSetInfo;

OpenHRP::_impl_ShapeSetInfo::~_impl_ShapeSetInfo() {}


::CORBA::Boolean
OpenHRP::_impl_ShapeSetInfo::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "_get_shapes") ) {

    _0RL_cd_474383644c7db81e_00000000 _call_desc(_0RL_lcfn_474383644c7db81e_10000000, "_get_shapes", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_appearances") ) {

    _0RL_cd_474383644c7db81e_20000000 _call_desc(_0RL_lcfn_474383644c7db81e_30000000, "_get_appearances", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_materials") ) {

    _0RL_cd_474383644c7db81e_40000000 _call_desc(_0RL_lcfn_474383644c7db81e_50000000, "_get_materials", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_textures") ) {

    _0RL_cd_474383644c7db81e_60000000 _call_desc(_0RL_lcfn_474383644c7db81e_70000000, "_get_textures", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_ShapeSetInfo::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::ShapeSetInfo::_PD_repoId )
    return (::OpenHRP::_impl_ShapeSetInfo*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::ShapeSetInfo::_PD_repoId) )
    return (::OpenHRP::_impl_ShapeSetInfo*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_ShapeSetInfo::_mostDerivedRepoId()
{
  return ::OpenHRP::ShapeSetInfo::_PD_repoId;
}

OpenHRP::BodyInfo_ptr OpenHRP::BodyInfo_Helper::_nil() {
  return ::OpenHRP::BodyInfo::_nil();
}

::CORBA::Boolean OpenHRP::BodyInfo_Helper::is_nil(::OpenHRP::BodyInfo_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::BodyInfo_Helper::release(::OpenHRP::BodyInfo_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::BodyInfo_Helper::marshalObjRef(::OpenHRP::BodyInfo_ptr obj, cdrStream& s) {
  ::OpenHRP::BodyInfo::_marshalObjRef(obj, s);
}

OpenHRP::BodyInfo_ptr OpenHRP::BodyInfo_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::BodyInfo::_unmarshalObjRef(s);
}

void OpenHRP::BodyInfo_Helper::duplicate(::OpenHRP::BodyInfo_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::BodyInfo_ptr
OpenHRP::BodyInfo::_duplicate(::OpenHRP::BodyInfo_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::BodyInfo_ptr
OpenHRP::BodyInfo::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::BodyInfo_ptr
OpenHRP::BodyInfo::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::BodyInfo_ptr
OpenHRP::BodyInfo::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_BodyInfo _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_BodyInfo* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_BodyInfo;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::BodyInfo::_PD_repoId = "IDL:OpenHRP/BodyInfo:1.0";


OpenHRP::_objref_BodyInfo::~_objref_BodyInfo() {
  
}


OpenHRP::_objref_BodyInfo::_objref_BodyInfo(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::BodyInfo::_PD_repoId, ior, id, 1),
   _objref_ShapeSetInfo(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_BodyInfo::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::BodyInfo::_PD_repoId )
    return (::OpenHRP::BodyInfo_ptr) this;
  if( id == ::OpenHRP::ShapeSetInfo::_PD_repoId )
    return (::OpenHRP::ShapeSetInfo_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::BodyInfo::_PD_repoId) )
    return (::OpenHRP::BodyInfo_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::ShapeSetInfo::_PD_repoId) )
    return (::OpenHRP::ShapeSetInfo_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_474383644c7db81e_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_474383644c7db81e_80000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_474383644c7db81e_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_474383644c7db81e_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_80000000* tcd = (_0RL_cd_474383644c7db81e_80000000*)cd;
  OpenHRP::_impl_BodyInfo* impl = (OpenHRP::_impl_BodyInfo*) svnt->_ptrToInterface(OpenHRP::BodyInfo::_PD_repoId);
  tcd->result = impl->name();


}

char* OpenHRP::_objref_BodyInfo::name()
{
  _0RL_cd_474383644c7db81e_80000000 _call_desc(_0RL_lcfn_474383644c7db81e_90000000, "_get_name", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_80000000* tcd = (_0RL_cd_474383644c7db81e_80000000*)cd;
  OpenHRP::_impl_BodyInfo* impl = (OpenHRP::_impl_BodyInfo*) svnt->_ptrToInterface(OpenHRP::BodyInfo::_PD_repoId);
  tcd->result = impl->url();


}

char* OpenHRP::_objref_BodyInfo::url()
{
  _0RL_cd_474383644c7db81e_80000000 _call_desc(_0RL_lcfn_474383644c7db81e_a0000000, "_get_url", 9);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mStringSequence
class _0RL_cd_474383644c7db81e_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::StringSequence_var result;
};

void _0RL_cd_474383644c7db81e_b0000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::StringSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::StringSequence;
  (OpenHRP::StringSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_b0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_b0000000* tcd = (_0RL_cd_474383644c7db81e_b0000000*)cd;
  OpenHRP::_impl_BodyInfo* impl = (OpenHRP::_impl_BodyInfo*) svnt->_ptrToInterface(OpenHRP::BodyInfo::_PD_repoId);
  tcd->result = impl->info();


}

OpenHRP::StringSequence* OpenHRP::_objref_BodyInfo::info()
{
  _0RL_cd_474383644c7db81e_b0000000 _call_desc(_0RL_lcfn_474383644c7db81e_c0000000, "_get_info", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mLinkInfoSequence
class _0RL_cd_474383644c7db81e_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::LinkInfoSequence_var result;
};

void _0RL_cd_474383644c7db81e_d0000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::LinkInfoSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::LinkInfoSequence;
  (OpenHRP::LinkInfoSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_d0000000* tcd = (_0RL_cd_474383644c7db81e_d0000000*)cd;
  OpenHRP::_impl_BodyInfo* impl = (OpenHRP::_impl_BodyInfo*) svnt->_ptrToInterface(OpenHRP::BodyInfo::_PD_repoId);
  tcd->result = impl->links();


}

OpenHRP::LinkInfoSequence* OpenHRP::_objref_BodyInfo::links()
{
  _0RL_cd_474383644c7db81e_d0000000 _call_desc(_0RL_lcfn_474383644c7db81e_e0000000, "_get_links", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mAllLinkShapeIndexSequence
class _0RL_cd_474383644c7db81e_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::AllLinkShapeIndexSequence_var result;
};

void _0RL_cd_474383644c7db81e_f0000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::AllLinkShapeIndexSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::AllLinkShapeIndexSequence;
  (OpenHRP::AllLinkShapeIndexSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_f0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_f0000000* tcd = (_0RL_cd_474383644c7db81e_f0000000*)cd;
  OpenHRP::_impl_BodyInfo* impl = (OpenHRP::_impl_BodyInfo*) svnt->_ptrToInterface(OpenHRP::BodyInfo::_PD_repoId);
  tcd->result = impl->linkShapeIndices();


}

OpenHRP::AllLinkShapeIndexSequence* OpenHRP::_objref_BodyInfo::linkShapeIndices()
{
  _0RL_cd_474383644c7db81e_f0000000 _call_desc(_0RL_lcfn_474383644c7db81e_01000000, "_get_linkShapeIndices", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mExtraJointInfoSequence
class _0RL_cd_474383644c7db81e_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_11000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::ExtraJointInfoSequence_var result;
};

void _0RL_cd_474383644c7db81e_11000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::ExtraJointInfoSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_11000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::ExtraJointInfoSequence;
  (OpenHRP::ExtraJointInfoSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_11000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_11000000* tcd = (_0RL_cd_474383644c7db81e_11000000*)cd;
  OpenHRP::_impl_BodyInfo* impl = (OpenHRP::_impl_BodyInfo*) svnt->_ptrToInterface(OpenHRP::BodyInfo::_PD_repoId);
  tcd->result = impl->extraJoints();


}

OpenHRP::ExtraJointInfoSequence* OpenHRP::_objref_BodyInfo::extraJoints()
{
  _0RL_cd_474383644c7db81e_11000000 _call_desc(_0RL_lcfn_474383644c7db81e_21000000, "_get_extraJoints", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
OpenHRP::_pof_BodyInfo::~_pof_BodyInfo() {}


omniObjRef*
OpenHRP::_pof_BodyInfo::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_BodyInfo(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_BodyInfo::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::BodyInfo::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::ShapeSetInfo::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_BodyInfo _the_pof_OpenHRP_mBodyInfo;

OpenHRP::_impl_BodyInfo::~_impl_BodyInfo() {}


::CORBA::Boolean
OpenHRP::_impl_BodyInfo::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "_get_name") ) {

    _0RL_cd_474383644c7db81e_80000000 _call_desc(_0RL_lcfn_474383644c7db81e_90000000, "_get_name", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_url") ) {

    _0RL_cd_474383644c7db81e_80000000 _call_desc(_0RL_lcfn_474383644c7db81e_a0000000, "_get_url", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_info") ) {

    _0RL_cd_474383644c7db81e_b0000000 _call_desc(_0RL_lcfn_474383644c7db81e_c0000000, "_get_info", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_links") ) {

    _0RL_cd_474383644c7db81e_d0000000 _call_desc(_0RL_lcfn_474383644c7db81e_e0000000, "_get_links", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_linkShapeIndices") ) {

    _0RL_cd_474383644c7db81e_f0000000 _call_desc(_0RL_lcfn_474383644c7db81e_01000000, "_get_linkShapeIndices", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_extraJoints") ) {

    _0RL_cd_474383644c7db81e_11000000 _call_desc(_0RL_lcfn_474383644c7db81e_21000000, "_get_extraJoints", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ShapeSetInfo::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ShapeSetInfo*)this)->
      _impl_ShapeSetInfo::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_BodyInfo::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::BodyInfo::_PD_repoId )
    return (::OpenHRP::_impl_BodyInfo*) this;
  if( id == ::OpenHRP::ShapeSetInfo::_PD_repoId )
    return (::OpenHRP::_impl_ShapeSetInfo*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::BodyInfo::_PD_repoId) )
    return (::OpenHRP::_impl_BodyInfo*) this;
  if( omni::strMatch(id, ::OpenHRP::ShapeSetInfo::_PD_repoId) )
    return (::OpenHRP::_impl_ShapeSetInfo*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_BodyInfo::_mostDerivedRepoId()
{
  return ::OpenHRP::BodyInfo::_PD_repoId;
}

OpenHRP::SceneInfo_ptr OpenHRP::SceneInfo_Helper::_nil() {
  return ::OpenHRP::SceneInfo::_nil();
}

::CORBA::Boolean OpenHRP::SceneInfo_Helper::is_nil(::OpenHRP::SceneInfo_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::SceneInfo_Helper::release(::OpenHRP::SceneInfo_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::SceneInfo_Helper::marshalObjRef(::OpenHRP::SceneInfo_ptr obj, cdrStream& s) {
  ::OpenHRP::SceneInfo::_marshalObjRef(obj, s);
}

OpenHRP::SceneInfo_ptr OpenHRP::SceneInfo_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::SceneInfo::_unmarshalObjRef(s);
}

void OpenHRP::SceneInfo_Helper::duplicate(::OpenHRP::SceneInfo_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::SceneInfo_ptr
OpenHRP::SceneInfo::_duplicate(::OpenHRP::SceneInfo_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::SceneInfo_ptr
OpenHRP::SceneInfo::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::SceneInfo_ptr
OpenHRP::SceneInfo::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::SceneInfo_ptr
OpenHRP::SceneInfo::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_SceneInfo _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_SceneInfo* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_SceneInfo;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::SceneInfo::_PD_repoId = "IDL:OpenHRP/SceneInfo:1.0";


OpenHRP::_objref_SceneInfo::~_objref_SceneInfo() {
  
}


OpenHRP::_objref_SceneInfo::_objref_SceneInfo(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::SceneInfo::_PD_repoId, ior, id, 1),
   _objref_ShapeSetInfo(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_SceneInfo::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::SceneInfo::_PD_repoId )
    return (::OpenHRP::SceneInfo_ptr) this;
  if( id == ::OpenHRP::ShapeSetInfo::_PD_repoId )
    return (::OpenHRP::ShapeSetInfo_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::SceneInfo::_PD_repoId) )
    return (::OpenHRP::SceneInfo_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::ShapeSetInfo::_PD_repoId) )
    return (::OpenHRP::ShapeSetInfo_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_80000000* tcd = (_0RL_cd_474383644c7db81e_80000000*)cd;
  OpenHRP::_impl_SceneInfo* impl = (OpenHRP::_impl_SceneInfo*) svnt->_ptrToInterface(OpenHRP::SceneInfo::_PD_repoId);
  tcd->result = impl->url();


}

char* OpenHRP::_objref_SceneInfo::url()
{
  _0RL_cd_474383644c7db81e_80000000 _call_desc(_0RL_lcfn_474383644c7db81e_31000000, "_get_url", 9);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mTransformedShapeIndexSequence
class _0RL_cd_474383644c7db81e_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::TransformedShapeIndexSequence_var result;
};

void _0RL_cd_474383644c7db81e_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::TransformedShapeIndexSequence&) result >>= _n;

}

void _0RL_cd_474383644c7db81e_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::TransformedShapeIndexSequence;
  (OpenHRP::TransformedShapeIndexSequence&)result <<= _n;

}

const char* const _0RL_cd_474383644c7db81e_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_41000000* tcd = (_0RL_cd_474383644c7db81e_41000000*)cd;
  OpenHRP::_impl_SceneInfo* impl = (OpenHRP::_impl_SceneInfo*) svnt->_ptrToInterface(OpenHRP::SceneInfo::_PD_repoId);
  tcd->result = impl->shapeIndices();


}

OpenHRP::TransformedShapeIndexSequence* OpenHRP::_objref_SceneInfo::shapeIndices()
{
  _0RL_cd_474383644c7db81e_41000000 _call_desc(_0RL_lcfn_474383644c7db81e_51000000, "_get_shapeIndices", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
OpenHRP::_pof_SceneInfo::~_pof_SceneInfo() {}


omniObjRef*
OpenHRP::_pof_SceneInfo::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_SceneInfo(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_SceneInfo::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::SceneInfo::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::ShapeSetInfo::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_SceneInfo _the_pof_OpenHRP_mSceneInfo;

OpenHRP::_impl_SceneInfo::~_impl_SceneInfo() {}


::CORBA::Boolean
OpenHRP::_impl_SceneInfo::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "_get_url") ) {

    _0RL_cd_474383644c7db81e_80000000 _call_desc(_0RL_lcfn_474383644c7db81e_31000000, "_get_url", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_shapeIndices") ) {

    _0RL_cd_474383644c7db81e_41000000 _call_desc(_0RL_lcfn_474383644c7db81e_51000000, "_get_shapeIndices", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ShapeSetInfo::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ShapeSetInfo*)this)->
      _impl_ShapeSetInfo::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_SceneInfo::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::SceneInfo::_PD_repoId )
    return (::OpenHRP::_impl_SceneInfo*) this;
  if( id == ::OpenHRP::ShapeSetInfo::_PD_repoId )
    return (::OpenHRP::_impl_ShapeSetInfo*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::SceneInfo::_PD_repoId) )
    return (::OpenHRP::_impl_SceneInfo*) this;
  if( omni::strMatch(id, ::OpenHRP::ShapeSetInfo::_PD_repoId) )
    return (::OpenHRP::_impl_ShapeSetInfo*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_SceneInfo::_mostDerivedRepoId()
{
  return ::OpenHRP::SceneInfo::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny OpenHRP::ModelLoader::ModelLoaderException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP OpenHRP::ModelLoader::ModelLoaderException::insertToAnyFnNCP = 0;

OpenHRP::ModelLoader::ModelLoaderException::ModelLoaderException(const OpenHRP::ModelLoader::ModelLoaderException& _s) : ::CORBA::UserException(_s)
{
  description = _s.description;

}

OpenHRP::ModelLoader::ModelLoaderException::ModelLoaderException(const char* _description)
{
  pd_insertToAnyFn    = OpenHRP::ModelLoader::ModelLoaderException::insertToAnyFn;
  pd_insertToAnyFnNCP = OpenHRP::ModelLoader::ModelLoaderException::insertToAnyFnNCP;
  description = _description;

}



OpenHRP::ModelLoader::ModelLoaderException& OpenHRP::ModelLoader::ModelLoaderException::operator=(const OpenHRP::ModelLoader::ModelLoaderException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  description = _s.description;

  return *this;
}

OpenHRP::ModelLoader::ModelLoaderException::~ModelLoaderException() {}

void OpenHRP::ModelLoader::ModelLoaderException::_raise() const { throw *this; }

const char* OpenHRP::ModelLoader::ModelLoaderException::_PD_repoId = "IDL:OpenHRP/ModelLoader/ModelLoaderException:1.0";
const char* OpenHRP::ModelLoader::ModelLoaderException::_PD_typeId = "Exception/UserException/OpenHRP::ModelLoader::ModelLoaderException";

OpenHRP::ModelLoader::ModelLoaderException* OpenHRP::ModelLoader::ModelLoaderException::_downcast(::CORBA::Exception* _e) {
  return (ModelLoaderException*) _NP_is_a(_e, _PD_typeId);
}

const OpenHRP::ModelLoader::ModelLoaderException* OpenHRP::ModelLoader::ModelLoaderException::_downcast(const ::CORBA::Exception* _e) {
  return (const ModelLoaderException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* OpenHRP::ModelLoader::ModelLoaderException::_NP_duplicate() const {
  return new ModelLoaderException(*this);
}

const char* OpenHRP::ModelLoader::ModelLoaderException::_NP_typeId() const {
  return _PD_typeId;
}

const char* OpenHRP::ModelLoader::ModelLoaderException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:OpenHRP/ModelLoader/ModelLoaderException:1.0");
  return _PD_repoId;
}
 
void OpenHRP::ModelLoader::ModelLoaderException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
OpenHRP::ModelLoader::ModelLoaderException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(description,0);

}

void
OpenHRP::ModelLoader::ModelLoaderException::operator<<= (cdrStream& _n)
{
  description = _n.unmarshalString(0);

}

void
OpenHRP::ModelLoader::ModelLoadOption::operator>>= (cdrStream &_n) const
{
  _n.marshalBoolean(readImage);
  (const ShortSequence&) AABBdata >>= _n;
  AABBtype >>= _n;

}

void
OpenHRP::ModelLoader::ModelLoadOption::operator<<= (cdrStream &_n)
{
  readImage = _n.unmarshalBoolean();
  (ShortSequence&)AABBdata <<= _n;
  (AABBdataType&)AABBtype <<= _n;

}

OpenHRP::ModelLoader_ptr OpenHRP::ModelLoader_Helper::_nil() {
  return ::OpenHRP::ModelLoader::_nil();
}

::CORBA::Boolean OpenHRP::ModelLoader_Helper::is_nil(::OpenHRP::ModelLoader_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::ModelLoader_Helper::release(::OpenHRP::ModelLoader_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::ModelLoader_Helper::marshalObjRef(::OpenHRP::ModelLoader_ptr obj, cdrStream& s) {
  ::OpenHRP::ModelLoader::_marshalObjRef(obj, s);
}

OpenHRP::ModelLoader_ptr OpenHRP::ModelLoader_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::ModelLoader::_unmarshalObjRef(s);
}

void OpenHRP::ModelLoader_Helper::duplicate(::OpenHRP::ModelLoader_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::ModelLoader_ptr
OpenHRP::ModelLoader::_duplicate(::OpenHRP::ModelLoader_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::ModelLoader_ptr
OpenHRP::ModelLoader::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::ModelLoader_ptr
OpenHRP::ModelLoader::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::ModelLoader_ptr
OpenHRP::ModelLoader::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ModelLoader _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ModelLoader* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ModelLoader;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::ModelLoader::_PD_repoId = "IDL:OpenHRP/ModelLoader:1.0";


OpenHRP::_objref_ModelLoader::~_objref_ModelLoader() {
  
}


OpenHRP::_objref_ModelLoader::_objref_ModelLoader(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::ModelLoader::_PD_repoId, ior, id, 1),
   _objref_ServerObject(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_ModelLoader::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::ModelLoader::_PD_repoId )
    return (::OpenHRP::ModelLoader_ptr) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::ServerObject_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::ModelLoader::_PD_repoId) )
    return (::OpenHRP::ModelLoader_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::ServerObject_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mBodyInfo_i_cstring_e_cOpenHRP_mModelLoader_mModelLoaderException
class _0RL_cd_474383644c7db81e_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::BodyInfo_var result;
};

void _0RL_cd_474383644c7db81e_61000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_474383644c7db81e_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_474383644c7db81e_61000000::marshalReturnedValues(cdrStream& _n)
{
  OpenHRP::BodyInfo::_marshalObjRef(result,_n);

}

void _0RL_cd_474383644c7db81e_61000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = OpenHRP::BodyInfo::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_474383644c7db81e_61000000::_user_exns[] = {
  OpenHRP::ModelLoader::ModelLoaderException::_PD_repoId
};

void _0RL_cd_474383644c7db81e_61000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, OpenHRP::ModelLoader::ModelLoaderException::_PD_repoId) ) {
    OpenHRP::ModelLoader::ModelLoaderException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_61000000* tcd = (_0RL_cd_474383644c7db81e_61000000*)cd;
  OpenHRP::_impl_ModelLoader* impl = (OpenHRP::_impl_ModelLoader*) svnt->_ptrToInterface(OpenHRP::ModelLoader::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getBodyInfo(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getBodyInfo(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getBodyInfo(tcd->arg_0);
    }
    catch(OpenHRP::ModelLoader::ModelLoaderException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

OpenHRP::BodyInfo_ptr OpenHRP::_objref_ModelLoader::getBodyInfo(const char* url)
{
  _0RL_cd_474383644c7db81e_61000000 _call_desc(_0RL_lcfn_474383644c7db81e_71000000, "getBodyInfo", 12);
  _call_desc.arg_0 = url;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mBodyInfo_i_cstring_i_cOpenHRP_mModelLoader_mModelLoadOption_e_cOpenHRP_mModelLoader_mModelLoaderException
class _0RL_cd_474383644c7db81e_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::ModelLoader::ModelLoadOption_var arg_1_;
  const OpenHRP::ModelLoader::ModelLoadOption* arg_1;
  OpenHRP::BodyInfo_var result;
};

void _0RL_cd_474383644c7db81e_81000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const OpenHRP::ModelLoader::ModelLoadOption&) *arg_1 >>= _n;

}

void _0RL_cd_474383644c7db81e_81000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new OpenHRP::ModelLoader::ModelLoadOption;
  (OpenHRP::ModelLoader::ModelLoadOption&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_474383644c7db81e_81000000::marshalReturnedValues(cdrStream& _n)
{
  OpenHRP::BodyInfo::_marshalObjRef(result,_n);

}

void _0RL_cd_474383644c7db81e_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = OpenHRP::BodyInfo::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_474383644c7db81e_81000000::_user_exns[] = {
  OpenHRP::ModelLoader::ModelLoaderException::_PD_repoId
};

void _0RL_cd_474383644c7db81e_81000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, OpenHRP::ModelLoader::ModelLoaderException::_PD_repoId) ) {
    OpenHRP::ModelLoader::ModelLoaderException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_81000000* tcd = (_0RL_cd_474383644c7db81e_81000000*)cd;
  OpenHRP::_impl_ModelLoader* impl = (OpenHRP::_impl_ModelLoader*) svnt->_ptrToInterface(OpenHRP::ModelLoader::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getBodyInfoEx(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getBodyInfoEx(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->getBodyInfoEx(tcd->arg_0, *tcd->arg_1);
    }
    catch(OpenHRP::ModelLoader::ModelLoaderException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

OpenHRP::BodyInfo_ptr OpenHRP::_objref_ModelLoader::getBodyInfoEx(const char* url, const ::OpenHRP::ModelLoader::ModelLoadOption& option)
{
  _0RL_cd_474383644c7db81e_81000000 _call_desc(_0RL_lcfn_474383644c7db81e_91000000, "getBodyInfoEx", 14);
  _call_desc.arg_0 = url;
  _call_desc.arg_1 = &(::OpenHRP::ModelLoader::ModelLoadOption&) option;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_61000000* tcd = (_0RL_cd_474383644c7db81e_61000000*)cd;
  OpenHRP::_impl_ModelLoader* impl = (OpenHRP::_impl_ModelLoader*) svnt->_ptrToInterface(OpenHRP::ModelLoader::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->loadBodyInfo(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->loadBodyInfo(tcd->arg_0);
  else {
    try {
      tcd->result = impl->loadBodyInfo(tcd->arg_0);
    }
    catch(OpenHRP::ModelLoader::ModelLoaderException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

OpenHRP::BodyInfo_ptr OpenHRP::_objref_ModelLoader::loadBodyInfo(const char* url)
{
  _0RL_cd_474383644c7db81e_61000000 _call_desc(_0RL_lcfn_474383644c7db81e_a1000000, "loadBodyInfo", 13);
  _call_desc.arg_0 = url;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_81000000* tcd = (_0RL_cd_474383644c7db81e_81000000*)cd;
  OpenHRP::_impl_ModelLoader* impl = (OpenHRP::_impl_ModelLoader*) svnt->_ptrToInterface(OpenHRP::ModelLoader::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->loadBodyInfoEx(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->loadBodyInfoEx(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->loadBodyInfoEx(tcd->arg_0, *tcd->arg_1);
    }
    catch(OpenHRP::ModelLoader::ModelLoaderException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

OpenHRP::BodyInfo_ptr OpenHRP::_objref_ModelLoader::loadBodyInfoEx(const char* url, const ::OpenHRP::ModelLoader::ModelLoadOption& option)
{
  _0RL_cd_474383644c7db81e_81000000 _call_desc(_0RL_lcfn_474383644c7db81e_b1000000, "loadBodyInfoEx", 15);
  _call_desc.arg_0 = url;
  _call_desc.arg_1 = &(::OpenHRP::ModelLoader::ModelLoadOption&) option;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mSceneInfo_i_cstring_e_cOpenHRP_mModelLoader_mModelLoaderException
class _0RL_cd_474383644c7db81e_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::SceneInfo_var result;
};

void _0RL_cd_474383644c7db81e_c1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_474383644c7db81e_c1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_474383644c7db81e_c1000000::marshalReturnedValues(cdrStream& _n)
{
  OpenHRP::SceneInfo::_marshalObjRef(result,_n);

}

void _0RL_cd_474383644c7db81e_c1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = OpenHRP::SceneInfo::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_474383644c7db81e_c1000000::_user_exns[] = {
  OpenHRP::ModelLoader::ModelLoaderException::_PD_repoId
};

void _0RL_cd_474383644c7db81e_c1000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, OpenHRP::ModelLoader::ModelLoaderException::_PD_repoId) ) {
    OpenHRP::ModelLoader::ModelLoaderException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_474383644c7db81e_c1000000* tcd = (_0RL_cd_474383644c7db81e_c1000000*)cd;
  OpenHRP::_impl_ModelLoader* impl = (OpenHRP::_impl_ModelLoader*) svnt->_ptrToInterface(OpenHRP::ModelLoader::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->loadSceneInfo(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->loadSceneInfo(tcd->arg_0);
  else {
    try {
      tcd->result = impl->loadSceneInfo(tcd->arg_0);
    }
    catch(OpenHRP::ModelLoader::ModelLoaderException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

OpenHRP::SceneInfo_ptr OpenHRP::_objref_ModelLoader::loadSceneInfo(const char* url)
{
  _0RL_cd_474383644c7db81e_c1000000 _call_desc(_0RL_lcfn_474383644c7db81e_d1000000, "loadSceneInfo", 14);
  _call_desc.arg_0 = url;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_474383644c7db81e_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_474383644c7db81e_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_474383644c7db81e_e1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_474383644c7db81e_f1000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_ModelLoader* impl = (OpenHRP::_impl_ModelLoader*) svnt->_ptrToInterface(OpenHRP::ModelLoader::_PD_repoId);
  impl->clearData();


}

void OpenHRP::_objref_ModelLoader::clearData()
{
  _0RL_cd_474383644c7db81e_e1000000 _call_desc(_0RL_lcfn_474383644c7db81e_f1000000, "clearData", 10);


  _invoke(_call_desc);



}
OpenHRP::_pof_ModelLoader::~_pof_ModelLoader() {}


omniObjRef*
OpenHRP::_pof_ModelLoader::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_ModelLoader(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_ModelLoader::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::ModelLoader::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::ServerObject::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_ModelLoader _the_pof_OpenHRP_mModelLoader;

OpenHRP::_impl_ModelLoader::~_impl_ModelLoader() {}


::CORBA::Boolean
OpenHRP::_impl_ModelLoader::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getBodyInfo") ) {

    _0RL_cd_474383644c7db81e_61000000 _call_desc(_0RL_lcfn_474383644c7db81e_71000000, "getBodyInfo", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getBodyInfoEx") ) {

    _0RL_cd_474383644c7db81e_81000000 _call_desc(_0RL_lcfn_474383644c7db81e_91000000, "getBodyInfoEx", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "loadBodyInfo") ) {

    _0RL_cd_474383644c7db81e_61000000 _call_desc(_0RL_lcfn_474383644c7db81e_a1000000, "loadBodyInfo", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "loadBodyInfoEx") ) {

    _0RL_cd_474383644c7db81e_81000000 _call_desc(_0RL_lcfn_474383644c7db81e_b1000000, "loadBodyInfoEx", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "loadSceneInfo") ) {

    _0RL_cd_474383644c7db81e_c1000000 _call_desc(_0RL_lcfn_474383644c7db81e_d1000000, "loadSceneInfo", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clearData") ) {

    _0RL_cd_474383644c7db81e_e1000000 _call_desc(_0RL_lcfn_474383644c7db81e_f1000000, "clearData", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ServerObject*)this)->
      _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_ModelLoader::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::ModelLoader::_PD_repoId )
    return (::OpenHRP::_impl_ModelLoader*) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::ModelLoader::_PD_repoId) )
    return (::OpenHRP::_impl_ModelLoader*) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_ModelLoader::_mostDerivedRepoId()
{
  return ::OpenHRP::ModelLoader::_PD_repoId;
}

POA_OpenHRP::ShapeSetInfo::~ShapeSetInfo() {}

POA_OpenHRP::BodyInfo::~BodyInfo() {}

POA_OpenHRP::SceneInfo::~SceneInfo() {}

POA_OpenHRP::ModelLoader::~ModelLoader() {}

