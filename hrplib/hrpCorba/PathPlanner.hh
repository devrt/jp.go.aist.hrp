// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __PathPlanner_hh__
#define __PathPlanner_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_PathPlanner
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_PathPlanner
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_PathPlanner
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include "OpenHRPCommon.hh"
#endif
#ifndef __ModelLoader_hh_EXTERNAL_GUARD__
#define __ModelLoader_hh_EXTERNAL_GUARD__
#include "ModelLoader.hh"
#endif
#ifndef __World_hh_EXTERNAL_GUARD__
#define __World_hh_EXTERNAL_GUARD__
#include "World.hh"
#endif
#ifndef __CollisionDetector_hh_EXTERNAL_GUARD__
#define __CollisionDetector_hh_EXTERNAL_GUARD__
#include "CollisionDetector.hh"
#endif
#ifndef __DynamicsSimulator_hh_EXTERNAL_GUARD__
#define __DynamicsSimulator_hh_EXTERNAL_GUARD__
#include "DynamicsSimulator.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE OpenHRP

_CORBA_MODULE_BEG

#ifndef __OpenHRP_mPathPlanner__
#define __OpenHRP_mPathPlanner__

  class PathPlanner;
  class _objref_PathPlanner;
  class _impl_PathPlanner;
  
  typedef _objref_PathPlanner* PathPlanner_ptr;
  typedef PathPlanner_ptr PathPlannerRef;

  class PathPlanner_Helper {
  public:
    typedef PathPlanner_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_PathPlanner, PathPlanner_Helper> PathPlanner_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_PathPlanner,PathPlanner_Helper > PathPlanner_out;

#endif

  // interface PathPlanner
  class PathPlanner {
  public:
    // Declarations for this interface type.
    typedef PathPlanner_ptr _ptr_type;
    typedef PathPlanner_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class PointArray_var;

    class PointArray : public _CORBA_Unbounded_Sequence< DblSequence3 >  {
    public:
      typedef PointArray_var _var_type;
      inline PointArray() {}
      inline PointArray(const PointArray& _s)
        : _CORBA_Unbounded_Sequence< DblSequence3 > (_s) {}

      inline PointArray(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< DblSequence3 > (_max) {}
      inline PointArray(_CORBA_ULong _max, _CORBA_ULong _len, DblSequence3* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< DblSequence3 > (_max, _len, _val, _rel) {}

    

      inline PointArray& operator = (const PointArray& _s) {
        _CORBA_Unbounded_Sequence< DblSequence3 > ::operator=(_s);
        return *this;
      }
    };

    class PointArray_out;

    class PointArray_var {
    public:
      inline PointArray_var() : _pd_seq(0) {}
      inline PointArray_var(PointArray* _s) : _pd_seq(_s) {}
      inline PointArray_var(const PointArray_var& _s) {
        if( _s._pd_seq )  _pd_seq = new PointArray(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~PointArray_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline PointArray_var& operator = (PointArray* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline PointArray_var& operator = (const PointArray_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new PointArray;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline DblSequence3& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline PointArray* operator -> () { return _pd_seq; }
      inline const PointArray* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator PointArray& () const { return *_pd_seq; }
#else
      inline operator const PointArray& () const { return *_pd_seq; }
      inline operator PointArray& () { return *_pd_seq; }
#endif
        
      inline const PointArray& in() const { return *_pd_seq; }
      inline PointArray&       inout()    { return *_pd_seq; }
      inline PointArray*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline PointArray* _retn() { PointArray* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class PointArray_out;
      
    private:
      PointArray* _pd_seq;
    };

    class PointArray_out {
    public:
      inline PointArray_out(PointArray*& _s) : _data(_s) { _data = 0; }
      inline PointArray_out(PointArray_var& _s)
        : _data(_s._pd_seq) { _s = (PointArray*) 0; }
      inline PointArray_out(const PointArray_out& _s) : _data(_s._data) {}
      inline PointArray_out& operator = (const PointArray_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline PointArray_out& operator = (PointArray* _s) {
        _data = _s;
        return *this;
      }
      inline operator PointArray*&()  { return _data; }
      inline PointArray*& ptr()       { return _data; }
      inline PointArray* operator->() { return _data; }

      inline DblSequence3& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      PointArray*& _data;

    private:
      PointArray_out();
      PointArray_out& operator=(const PointArray_var&);
    };

    class Property_var;

    class Property : public _CORBA_Unbounded_Sequence< _CORBA_Bounded_Sequence_String< 2 >  >  {
    public:
      typedef Property_var _var_type;
      inline Property() {}
      inline Property(const Property& _s)
        : _CORBA_Unbounded_Sequence< _CORBA_Bounded_Sequence_String< 2 >  > (_s) {}

      inline Property(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< _CORBA_Bounded_Sequence_String< 2 >  > (_max) {}
      inline Property(_CORBA_ULong _max, _CORBA_ULong _len, _CORBA_Bounded_Sequence_String< 2 > * _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< _CORBA_Bounded_Sequence_String< 2 >  > (_max, _len, _val, _rel) {}

    

      inline Property& operator = (const Property& _s) {
        _CORBA_Unbounded_Sequence< _CORBA_Bounded_Sequence_String< 2 >  > ::operator=(_s);
        return *this;
      }
    };

    class Property_out;

    class Property_var {
    public:
      inline Property_var() : _pd_seq(0) {}
      inline Property_var(Property* _s) : _pd_seq(_s) {}
      inline Property_var(const Property_var& _s) {
        if( _s._pd_seq )  _pd_seq = new Property(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~Property_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline Property_var& operator = (Property* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline Property_var& operator = (const Property_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new Property;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline _CORBA_Bounded_Sequence_String< 2 > & operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline Property* operator -> () { return _pd_seq; }
      inline const Property* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator Property& () const { return *_pd_seq; }
#else
      inline operator const Property& () const { return *_pd_seq; }
      inline operator Property& () { return *_pd_seq; }
#endif
        
      inline const Property& in() const { return *_pd_seq; }
      inline Property&       inout()    { return *_pd_seq; }
      inline Property*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline Property* _retn() { Property* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class Property_out;
      
    private:
      Property* _pd_seq;
    };

    class Property_out {
    public:
      inline Property_out(Property*& _s) : _data(_s) { _data = 0; }
      inline Property_out(Property_var& _s)
        : _data(_s._pd_seq) { _s = (Property*) 0; }
      inline Property_out(const Property_out& _s) : _data(_s._data) {}
      inline Property_out& operator = (const Property_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline Property_out& operator = (Property* _s) {
        _data = _s;
        return *this;
      }
      inline operator Property*&()  { return _data; }
      inline Property*& ptr()       { return _data; }
      inline Property* operator->() { return _data; }

      inline _CORBA_Bounded_Sequence_String< 2 > & operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      Property*& _data;

    private:
      Property_out();
      Property_out& operator=(const Property_var&);
    };

    struct RoadmapNode {
      typedef _CORBA_ConstrType_Variable_Var<RoadmapNode> _var_type;

      
      DblArray3 cfg;

      LongSequence neighbors;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef RoadmapNode::_var_type RoadmapNode_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< RoadmapNode,RoadmapNode_var > RoadmapNode_out;

    class Roadmap_var;

    class Roadmap : public _CORBA_Unbounded_Sequence< RoadmapNode >  {
    public:
      typedef Roadmap_var _var_type;
      inline Roadmap() {}
      inline Roadmap(const Roadmap& _s)
        : _CORBA_Unbounded_Sequence< RoadmapNode > (_s) {}

      inline Roadmap(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< RoadmapNode > (_max) {}
      inline Roadmap(_CORBA_ULong _max, _CORBA_ULong _len, RoadmapNode* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< RoadmapNode > (_max, _len, _val, _rel) {}

    

      inline Roadmap& operator = (const Roadmap& _s) {
        _CORBA_Unbounded_Sequence< RoadmapNode > ::operator=(_s);
        return *this;
      }
    };

    class Roadmap_out;

    class Roadmap_var {
    public:
      inline Roadmap_var() : _pd_seq(0) {}
      inline Roadmap_var(Roadmap* _s) : _pd_seq(_s) {}
      inline Roadmap_var(const Roadmap_var& _s) {
        if( _s._pd_seq )  _pd_seq = new Roadmap(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~Roadmap_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline Roadmap_var& operator = (Roadmap* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline Roadmap_var& operator = (const Roadmap_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new Roadmap;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline RoadmapNode& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline Roadmap* operator -> () { return _pd_seq; }
      inline const Roadmap* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator Roadmap& () const { return *_pd_seq; }
#else
      inline operator const Roadmap& () const { return *_pd_seq; }
      inline operator Roadmap& () { return *_pd_seq; }
#endif
        
      inline const Roadmap& in() const { return *_pd_seq; }
      inline Roadmap&       inout()    { return *_pd_seq; }
      inline Roadmap*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline Roadmap* _retn() { Roadmap* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class Roadmap_out;
      
    private:
      Roadmap* _pd_seq;
    };

    class Roadmap_out {
    public:
      inline Roadmap_out(Roadmap*& _s) : _data(_s) { _data = 0; }
      inline Roadmap_out(Roadmap_var& _s)
        : _data(_s._pd_seq) { _s = (Roadmap*) 0; }
      inline Roadmap_out(const Roadmap_out& _s) : _data(_s._data) {}
      inline Roadmap_out& operator = (const Roadmap_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline Roadmap_out& operator = (Roadmap* _s) {
        _data = _s;
        return *this;
      }
      inline operator Roadmap*&()  { return _data; }
      inline Roadmap*& ptr()       { return _data; }
      inline Roadmap* operator->() { return _data; }

      inline RoadmapNode& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      Roadmap*& _data;

    private:
      Roadmap_out();
      Roadmap_out& operator=(const Roadmap_var&);
    };

  
  };

  class _objref_PathPlanner :
    public virtual _objref_World
  {
  public:
    void stopPlanning();
    void getRoadmap(::OpenHRP::PathPlanner::Roadmap_out rdmp);
    void clearRoadmap();
    void getMobilityNames(::OpenHRP::StringSequence_out mobilities);
    ::CORBA::Boolean setMobilityName(const char* mobility);
    void getOptimizerNames(::OpenHRP::StringSequence_out optimizers);
    void setRobotName(const char* model);
    void setAlgorithmName(const char* name);
    void getAlgorithmNames(::OpenHRP::StringSequence_out algos);
    void initPlanner();
    void setStartPosition(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double theta);
    void setGoalPosition(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double theta);
    ::CORBA::Boolean getProperties(const char* alg, ::OpenHRP::StringSequence_out props, ::OpenHRP::StringSequence_out defaults);
    void setProperties(const ::OpenHRP::PathPlanner::Property& properties);
    ::CORBA::Boolean calcPath();
    void getPath(::OpenHRP::PathPlanner::PointArray_out path);
    void registerIntersectionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double tolerance);
    void registerCharacterByURL(const char* name, const char* url);
    void setCharacterPosition(const char* character, const ::OpenHRP::DblSequence& pos);
    void initSimulation();
    ::CORBA::Boolean optimize(const char* optimizer);

    inline _objref_PathPlanner()  { _PR_setobj(0); }  // nil
    _objref_PathPlanner(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_PathPlanner();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_PathPlanner(const _objref_PathPlanner&);
    _objref_PathPlanner& operator = (const _objref_PathPlanner&);
    // not implemented

    friend class PathPlanner;
  };

  class _pof_PathPlanner : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_PathPlanner() : _OMNI_NS(proxyObjectFactory)(PathPlanner::_PD_repoId) {}
    virtual ~_pof_PathPlanner();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_PathPlanner :
    public virtual _impl_World
  {
  public:
    virtual ~_impl_PathPlanner();

    virtual void stopPlanning() = 0;
    virtual void getRoadmap(::OpenHRP::PathPlanner::Roadmap_out rdmp) = 0;
    virtual void clearRoadmap() = 0;
    virtual void getMobilityNames(::OpenHRP::StringSequence_out mobilities) = 0;
    virtual ::CORBA::Boolean setMobilityName(const char* mobility) = 0;
    virtual void getOptimizerNames(::OpenHRP::StringSequence_out optimizers) = 0;
    virtual void setRobotName(const char* model) = 0;
    virtual void setAlgorithmName(const char* name) = 0;
    virtual void getAlgorithmNames(::OpenHRP::StringSequence_out algos) = 0;
    virtual void initPlanner() = 0;
    virtual void setStartPosition(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double theta) = 0;
    virtual void setGoalPosition(::CORBA::Double x, ::CORBA::Double y, ::CORBA::Double theta) = 0;
    virtual ::CORBA::Boolean getProperties(const char* alg, ::OpenHRP::StringSequence_out props, ::OpenHRP::StringSequence_out defaults) = 0;
    virtual void setProperties(const ::OpenHRP::PathPlanner::Property& properties) = 0;
    virtual ::CORBA::Boolean calcPath() = 0;
    virtual void getPath(::OpenHRP::PathPlanner::PointArray_out path) = 0;
    virtual void registerIntersectionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double tolerance) = 0;
    virtual void registerCharacterByURL(const char* name, const char* url) = 0;
    virtual void setCharacterPosition(const char* character, const ::OpenHRP::DblSequence& pos) = 0;
    virtual void initSimulation() = 0;
    virtual ::CORBA::Boolean optimize(const char* optimizer) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_OpenHRP
_CORBA_MODULE_BEG

  class PathPlanner :
    public virtual OpenHRP::_impl_PathPlanner,
    public virtual World
  {
  public:
    virtual ~PathPlanner();

    inline ::OpenHRP::PathPlanner_ptr _this() {
      return (::OpenHRP::PathPlanner_ptr) _do_this(::OpenHRP::PathPlanner::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenHRP
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
OpenHRP::PathPlanner::_marshalObjRef(::OpenHRP::PathPlanner_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_PathPlanner
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_PathPlanner
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_PathPlanner
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_PathPlanner
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_PathPlanner
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_PathPlanner
#endif

#endif  // __PathPlanner_hh__

