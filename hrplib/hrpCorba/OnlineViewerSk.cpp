// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "OnlineViewer.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



::CORBA::Exception::insertExceptionToAny OpenHRP::OnlineViewer::OnlineViewerException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP OpenHRP::OnlineViewer::OnlineViewerException::insertToAnyFnNCP = 0;

OpenHRP::OnlineViewer::OnlineViewerException::OnlineViewerException(const OpenHRP::OnlineViewer::OnlineViewerException& _s) : ::CORBA::UserException(_s)
{
  description = _s.description;

}

OpenHRP::OnlineViewer::OnlineViewerException::OnlineViewerException(const char* _description)
{
  pd_insertToAnyFn    = OpenHRP::OnlineViewer::OnlineViewerException::insertToAnyFn;
  pd_insertToAnyFnNCP = OpenHRP::OnlineViewer::OnlineViewerException::insertToAnyFnNCP;
  description = _description;

}



OpenHRP::OnlineViewer::OnlineViewerException& OpenHRP::OnlineViewer::OnlineViewerException::operator=(const OpenHRP::OnlineViewer::OnlineViewerException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  description = _s.description;

  return *this;
}

OpenHRP::OnlineViewer::OnlineViewerException::~OnlineViewerException() {}

void OpenHRP::OnlineViewer::OnlineViewerException::_raise() const { throw *this; }

const char* OpenHRP::OnlineViewer::OnlineViewerException::_PD_repoId = "IDL:OpenHRP/OnlineViewer/OnlineViewerException:1.0";
const char* OpenHRP::OnlineViewer::OnlineViewerException::_PD_typeId = "Exception/UserException/OpenHRP::OnlineViewer::OnlineViewerException";

OpenHRP::OnlineViewer::OnlineViewerException* OpenHRP::OnlineViewer::OnlineViewerException::_downcast(::CORBA::Exception* _e) {
  return (OnlineViewerException*) _NP_is_a(_e, _PD_typeId);
}

const OpenHRP::OnlineViewer::OnlineViewerException* OpenHRP::OnlineViewer::OnlineViewerException::_downcast(const ::CORBA::Exception* _e) {
  return (const OnlineViewerException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* OpenHRP::OnlineViewer::OnlineViewerException::_NP_duplicate() const {
  return new OnlineViewerException(*this);
}

const char* OpenHRP::OnlineViewer::OnlineViewerException::_NP_typeId() const {
  return _PD_typeId;
}

const char* OpenHRP::OnlineViewer::OnlineViewerException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:OpenHRP/OnlineViewer/OnlineViewerException:1.0");
  return _PD_repoId;
}
 
void OpenHRP::OnlineViewer::OnlineViewerException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
OpenHRP::OnlineViewer::OnlineViewerException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(description,0);

}

void
OpenHRP::OnlineViewer::OnlineViewerException::operator<<= (cdrStream& _n)
{
  description = _n.unmarshalString(0);

}

OpenHRP::OnlineViewer_ptr OpenHRP::OnlineViewer_Helper::_nil() {
  return ::OpenHRP::OnlineViewer::_nil();
}

::CORBA::Boolean OpenHRP::OnlineViewer_Helper::is_nil(::OpenHRP::OnlineViewer_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::OnlineViewer_Helper::release(::OpenHRP::OnlineViewer_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::OnlineViewer_Helper::marshalObjRef(::OpenHRP::OnlineViewer_ptr obj, cdrStream& s) {
  ::OpenHRP::OnlineViewer::_marshalObjRef(obj, s);
}

OpenHRP::OnlineViewer_ptr OpenHRP::OnlineViewer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::OnlineViewer::_unmarshalObjRef(s);
}

void OpenHRP::OnlineViewer_Helper::duplicate(::OpenHRP::OnlineViewer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::OnlineViewer_ptr
OpenHRP::OnlineViewer::_duplicate(::OpenHRP::OnlineViewer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::OnlineViewer_ptr
OpenHRP::OnlineViewer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::OnlineViewer_ptr
OpenHRP::OnlineViewer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::OnlineViewer_ptr
OpenHRP::OnlineViewer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_OnlineViewer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_OnlineViewer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_OnlineViewer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::OnlineViewer::_PD_repoId = "IDL:OpenHRP/OnlineViewer:1.0";


OpenHRP::_objref_OnlineViewer::~_objref_OnlineViewer() {
  
}


OpenHRP::_objref_OnlineViewer::_objref_OnlineViewer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::OnlineViewer::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_OnlineViewer::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::OnlineViewer::_PD_repoId )
    return (::OpenHRP::OnlineViewer_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::OnlineViewer::_PD_repoId) )
    return (::OpenHRP::OnlineViewer_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cOpenHRP_mWorldState
class _0RL_cd_c9221ad529a1af8f_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c9221ad529a1af8f_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  OpenHRP::WorldState_var arg_0_;
  const OpenHRP::WorldState* arg_0;
};

void _0RL_cd_c9221ad529a1af8f_00000000::marshalArguments(cdrStream& _n)
{
  (const OpenHRP::WorldState&) *arg_0 >>= _n;

}

void _0RL_cd_c9221ad529a1af8f_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new OpenHRP::WorldState;
  (OpenHRP::WorldState&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_c9221ad529a1af8f_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c9221ad529a1af8f_00000000* tcd = (_0RL_cd_c9221ad529a1af8f_00000000*)cd;
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  impl->update(*tcd->arg_0);


}

void OpenHRP::_objref_OnlineViewer::update(const ::OpenHRP::WorldState& state)
{
  _0RL_cd_c9221ad529a1af8f_00000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_10000000, "update", 7);
  _call_desc.arg_0 = &(::OpenHRP::WorldState&) state;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_e_cOpenHRP_mOnlineViewer_mOnlineViewerException
class _0RL_cd_c9221ad529a1af8f_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c9221ad529a1af8f_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_c9221ad529a1af8f_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_c9221ad529a1af8f_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_c9221ad529a1af8f_20000000::_user_exns[] = {
  OpenHRP::OnlineViewer::OnlineViewerException::_PD_repoId
};

void _0RL_cd_c9221ad529a1af8f_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, OpenHRP::OnlineViewer::OnlineViewerException::_PD_repoId) ) {
    OpenHRP::OnlineViewer::OnlineViewerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c9221ad529a1af8f_20000000* tcd = (_0RL_cd_c9221ad529a1af8f_20000000*)cd;
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->load(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->load(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->load(tcd->arg_0, tcd->arg_1);
    }
    catch(OpenHRP::OnlineViewer::OnlineViewerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void OpenHRP::_objref_OnlineViewer::load(const char* name, const char* url)
{
  _0RL_cd_c9221ad529a1af8f_20000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_30000000, "load", 5);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = url;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_c9221ad529a1af8f_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c9221ad529a1af8f_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_c9221ad529a1af8f_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_50000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  impl->clearLog();


}

void OpenHRP::_objref_OnlineViewer::clearLog()
{
  _0RL_cd_c9221ad529a1af8f_40000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_50000000, "clearLog", 9);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_60000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  impl->clearData();


}

void OpenHRP::_objref_OnlineViewer::clearData()
{
  _0RL_cd_c9221ad529a1af8f_40000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_60000000, "clearData", 10);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c9221ad529a1af8f_00000000* tcd = (_0RL_cd_c9221ad529a1af8f_00000000*)cd;
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  impl->drawScene(*tcd->arg_0);


}

void OpenHRP::_objref_OnlineViewer::drawScene(const ::OpenHRP::WorldState& state)
{
  _0RL_cd_c9221ad529a1af8f_00000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_70000000, "drawScene", 10);
  _call_desc.arg_0 = &(::OpenHRP::WorldState&) state;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cfloat
class _0RL_cd_c9221ad529a1af8f_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c9221ad529a1af8f_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Float arg_0;
};

void _0RL_cd_c9221ad529a1af8f_80000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_c9221ad529a1af8f_80000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Float&)arg_0 <<= _n;

}

const char* const _0RL_cd_c9221ad529a1af8f_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c9221ad529a1af8f_80000000* tcd = (_0RL_cd_c9221ad529a1af8f_80000000*)cd;
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  impl->setLineWidth(tcd->arg_0);


}

void OpenHRP::_objref_OnlineViewer::setLineWidth(::CORBA::Float width)
{
  _0RL_cd_c9221ad529a1af8f_80000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_90000000, "setLineWidth", 13);
  _call_desc.arg_0 = width;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c9221ad529a1af8f_80000000* tcd = (_0RL_cd_c9221ad529a1af8f_80000000*)cd;
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  impl->setLineScale(tcd->arg_0);


}

void OpenHRP::_objref_OnlineViewer::setLineScale(::CORBA::Float scale)
{
  _0RL_cd_c9221ad529a1af8f_80000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_a0000000, "setLineScale", 13);
  _call_desc.arg_0 = scale;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_o_cOpenHRP_mDblSequence
class _0RL_cd_c9221ad529a1af8f_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c9221ad529a1af8f_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::DblSequence_var arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_c9221ad529a1af8f_b0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_c9221ad529a1af8f_b0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_c9221ad529a1af8f_b0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const OpenHRP::DblSequence&) arg_1 >>= _n;

}

void _0RL_cd_c9221ad529a1af8f_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_1 <<= _n;

}

const char* const _0RL_cd_c9221ad529a1af8f_b0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c9221ad529a1af8f_b0000000* tcd = (_0RL_cd_c9221ad529a1af8f_b0000000*)cd;
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  tcd->result = impl->getPosture(tcd->arg_0, tcd->arg_1.out());


}

::CORBA::Boolean OpenHRP::_objref_OnlineViewer::getPosture(const char* robotId, ::OpenHRP::DblSequence_out posture)
{
  _0RL_cd_c9221ad529a1af8f_b0000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_c0000000, "getPosture", 11);
  _call_desc.arg_0 = robotId;

  _invoke(_call_desc);
  posture = _call_desc.arg_1._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_c9221ad529a1af8f_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c9221ad529a1af8f_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_c9221ad529a1af8f_d0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_c9221ad529a1af8f_d0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_c9221ad529a1af8f_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c9221ad529a1af8f_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c9221ad529a1af8f_d0000000* tcd = (_0RL_cd_c9221ad529a1af8f_d0000000*)cd;
  OpenHRP::_impl_OnlineViewer* impl = (OpenHRP::_impl_OnlineViewer*) svnt->_ptrToInterface(OpenHRP::OnlineViewer::_PD_repoId);
  impl->setLogName(tcd->arg_0);


}

void OpenHRP::_objref_OnlineViewer::setLogName(const char* name)
{
  _0RL_cd_c9221ad529a1af8f_d0000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_e0000000, "setLogName", 11);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);



}
OpenHRP::_pof_OnlineViewer::~_pof_OnlineViewer() {}


omniObjRef*
OpenHRP::_pof_OnlineViewer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_OnlineViewer(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_OnlineViewer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::OnlineViewer::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_OnlineViewer _the_pof_OpenHRP_mOnlineViewer;

OpenHRP::_impl_OnlineViewer::~_impl_OnlineViewer() {}


::CORBA::Boolean
OpenHRP::_impl_OnlineViewer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "update") ) {

    _0RL_cd_c9221ad529a1af8f_00000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_10000000, "update", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "load") ) {

    _0RL_cd_c9221ad529a1af8f_20000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_30000000, "load", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clearLog") ) {

    _0RL_cd_c9221ad529a1af8f_40000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_50000000, "clearLog", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "clearData") ) {

    _0RL_cd_c9221ad529a1af8f_40000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_60000000, "clearData", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "drawScene") ) {

    _0RL_cd_c9221ad529a1af8f_00000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_70000000, "drawScene", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setLineWidth") ) {

    _0RL_cd_c9221ad529a1af8f_80000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_90000000, "setLineWidth", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setLineScale") ) {

    _0RL_cd_c9221ad529a1af8f_80000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_a0000000, "setLineScale", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPosture") ) {

    _0RL_cd_c9221ad529a1af8f_b0000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_c0000000, "getPosture", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setLogName") ) {

    _0RL_cd_c9221ad529a1af8f_d0000000 _call_desc(_0RL_lcfn_c9221ad529a1af8f_e0000000, "setLogName", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_OnlineViewer::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::OnlineViewer::_PD_repoId )
    return (::OpenHRP::_impl_OnlineViewer*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::OnlineViewer::_PD_repoId) )
    return (::OpenHRP::_impl_OnlineViewer*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_OnlineViewer::_mostDerivedRepoId()
{
  return ::OpenHRP::OnlineViewer::_PD_repoId;
}

POA_OpenHRP::OnlineViewer::~OnlineViewer() {}

