// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ViewSimulator_hh__
#define __ViewSimulator_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include "OpenHRPCommon.hh"
#endif
#ifndef __ModelLoader_hh_EXTERNAL_GUARD__
#define __ModelLoader_hh_EXTERNAL_GUARD__
#include "ModelLoader.hh"
#endif
#ifndef __World_hh_EXTERNAL_GUARD__
#define __World_hh_EXTERNAL_GUARD__
#include "World.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE OpenHRP

_CORBA_MODULE_BEG

  enum PixelFormat { ARGB, GRAY, DEPTH, RGB /*, __max_PixelFormat=0xffffffff */ };
  typedef PixelFormat& PixelFormat_out;

  struct ImageData {
    typedef _CORBA_ConstrType_Variable_Var<ImageData> _var_type;

    
    PixelFormat format;

    ::CORBA::Long width;

    ::CORBA::Long height;

    typedef _CORBA_Unbounded_Sequence_Octet _octetData_seq;
    _octetData_seq octetData;

    typedef _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 >  _longData_seq;
    _longData_seq longData;

    typedef _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 >  _floatData_seq;
    _floatData_seq floatData;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ImageData::_var_type ImageData_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ImageData,ImageData_var > ImageData_out;

#ifndef __OpenHRP_mCamera__
#define __OpenHRP_mCamera__

  class Camera;
  class _objref_Camera;
  class _impl_Camera;
  
  typedef _objref_Camera* Camera_ptr;
  typedef Camera_ptr CameraRef;

  class Camera_Helper {
  public:
    typedef Camera_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Camera, Camera_Helper> Camera_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Camera,Camera_Helper > Camera_out;

#endif

  // interface Camera
  class Camera {
  public:
    // Declarations for this interface type.
    typedef Camera_ptr _ptr_type;
    typedef Camera_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum CameraType { NONE, COLOR, MONO, DEPTH, COLOR_DEPTH, MONO_DEPTH /*, __max_CameraType=0xffffffff */ };
    typedef CameraType& CameraType_out;

    struct CameraParameter {
      typedef _CORBA_ConstrType_Variable_Var<CameraParameter> _var_type;

      
      CameraType type;

      ::CORBA::Float frontClipDistance;

      ::CORBA::Float backClipDistance;

      ::CORBA::Float fieldOfView;

      ::CORBA::Long sensorId;

      ::CORBA::String_member sensorName;

      ::CORBA::String_member defName;

      ::CORBA::Long width;

      ::CORBA::Long height;

      ::CORBA::Float frameRate;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CameraParameter::_var_type CameraParameter_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CameraParameter,CameraParameter_var > CameraParameter_out;

  
  };

  class _objref_Camera :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void destroy();
    Camera::CameraParameter* getCameraParameter();
    ImageData* getImageData();

    inline _objref_Camera()  { _PR_setobj(0); }  // nil
    _objref_Camera(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Camera();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Camera(const _objref_Camera&);
    _objref_Camera& operator = (const _objref_Camera&);
    // not implemented

    friend class Camera;
  };

  class _pof_Camera : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Camera() : _OMNI_NS(proxyObjectFactory)(Camera::_PD_repoId) {}
    virtual ~_pof_Camera();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Camera :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Camera();

    virtual void destroy() = 0;
    virtual Camera::CameraParameter* getCameraParameter() = 0;
    virtual ImageData* getImageData() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  class CameraSequence_var;

  class CameraSequence : public _CORBA_Unbounded_Sequence_ObjRef< _objref_Camera, _CORBA_ObjRef_Element< _objref_Camera, Camera_Helper> , Camera_Helper >  {
  public:
    typedef CameraSequence_var _var_type;
    inline CameraSequence() {}
    inline CameraSequence(const CameraSequence& _s)
      : _CORBA_Unbounded_Sequence_ObjRef< _objref_Camera, _CORBA_ObjRef_Element< _objref_Camera, Camera_Helper> , Camera_Helper > (_s) {}

    inline CameraSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_ObjRef< _objref_Camera, _CORBA_ObjRef_Element< _objref_Camera, Camera_Helper> , Camera_Helper > (_max) {}
    inline CameraSequence(_CORBA_ULong _max, _CORBA_ULong _len, Camera_ptr* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_ObjRef< _objref_Camera, _CORBA_ObjRef_Element< _objref_Camera, Camera_Helper> , Camera_Helper > (_max, _len, _val, _rel) {}

  

    inline CameraSequence& operator = (const CameraSequence& _s) {
      _CORBA_Unbounded_Sequence_ObjRef< _objref_Camera, _CORBA_ObjRef_Element< _objref_Camera, Camera_Helper> , Camera_Helper > ::operator=(_s);
      return *this;
    }
  };

  class CameraSequence_out;

  class CameraSequence_var {
  public:
    inline CameraSequence_var() : _pd_seq(0) {}
    inline CameraSequence_var(CameraSequence* _s) : _pd_seq(_s) {}
    inline CameraSequence_var(const CameraSequence_var& _s) {
      if( _s._pd_seq )  _pd_seq = new CameraSequence(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~CameraSequence_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline CameraSequence_var& operator = (CameraSequence* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline CameraSequence_var& operator = (const CameraSequence_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new CameraSequence;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_ObjRef_Element< _objref_Camera, Camera_Helper>  operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline CameraSequence* operator -> () { return _pd_seq; }
    inline const CameraSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator CameraSequence& () const { return *_pd_seq; }
#else
    inline operator const CameraSequence& () const { return *_pd_seq; }
    inline operator CameraSequence& () { return *_pd_seq; }
#endif
      
    inline const CameraSequence& in() const { return *_pd_seq; }
    inline CameraSequence&       inout()    { return *_pd_seq; }
    inline CameraSequence*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline CameraSequence* _retn() { CameraSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class CameraSequence_out;
    
  private:
    CameraSequence* _pd_seq;
  };

  class CameraSequence_out {
  public:
    inline CameraSequence_out(CameraSequence*& _s) : _data(_s) { _data = 0; }
    inline CameraSequence_out(CameraSequence_var& _s)
      : _data(_s._pd_seq) { _s = (CameraSequence*) 0; }
    inline CameraSequence_out(const CameraSequence_out& _s) : _data(_s._data) {}
    inline CameraSequence_out& operator = (const CameraSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline CameraSequence_out& operator = (CameraSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator CameraSequence*&()  { return _data; }
    inline CameraSequence*& ptr()       { return _data; }
    inline CameraSequence* operator->() { return _data; }

    inline _CORBA_ObjRef_Element< _objref_Camera, Camera_Helper>  operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    CameraSequence*& _data;

  private:
    CameraSequence_out();
    CameraSequence_out& operator=(const CameraSequence_var&);
  };

#ifndef __OpenHRP_mViewSimulator__
#define __OpenHRP_mViewSimulator__

  class ViewSimulator;
  class _objref_ViewSimulator;
  class _impl_ViewSimulator;
  
  typedef _objref_ViewSimulator* ViewSimulator_ptr;
  typedef ViewSimulator_ptr ViewSimulatorRef;

  class ViewSimulator_Helper {
  public:
    typedef ViewSimulator_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ViewSimulator, ViewSimulator_Helper> ViewSimulator_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ViewSimulator,ViewSimulator_Helper > ViewSimulator_out;

#endif

  // interface ViewSimulator
  class ViewSimulator {
  public:
    // Declarations for this interface type.
    typedef ViewSimulator_ptr _ptr_type;
    typedef ViewSimulator_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_ViewSimulator :
    public virtual _objref_World
  {
  public:
    void destroy();
    void getCameraSequence(::OpenHRP::CameraSequence_out cameras);
    void getCameraSequenceOf(const char* objectName, ::OpenHRP::CameraSequence_out cameras);
    void updateScene(const ::OpenHRP::WorldState& state);

    inline _objref_ViewSimulator()  { _PR_setobj(0); }  // nil
    _objref_ViewSimulator(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ViewSimulator();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ViewSimulator(const _objref_ViewSimulator&);
    _objref_ViewSimulator& operator = (const _objref_ViewSimulator&);
    // not implemented

    friend class ViewSimulator;
  };

  class _pof_ViewSimulator : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ViewSimulator() : _OMNI_NS(proxyObjectFactory)(ViewSimulator::_PD_repoId) {}
    virtual ~_pof_ViewSimulator();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ViewSimulator :
    public virtual _impl_World
  {
  public:
    virtual ~_impl_ViewSimulator();

    virtual void destroy() = 0;
    virtual void getCameraSequence(::OpenHRP::CameraSequence_out cameras) = 0;
    virtual void getCameraSequenceOf(const char* objectName, ::OpenHRP::CameraSequence_out cameras) = 0;
    virtual void updateScene(const ::OpenHRP::WorldState& state) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __OpenHRP_mViewSimulatorFactory__
#define __OpenHRP_mViewSimulatorFactory__

  class ViewSimulatorFactory;
  class _objref_ViewSimulatorFactory;
  class _impl_ViewSimulatorFactory;
  
  typedef _objref_ViewSimulatorFactory* ViewSimulatorFactory_ptr;
  typedef ViewSimulatorFactory_ptr ViewSimulatorFactoryRef;

  class ViewSimulatorFactory_Helper {
  public:
    typedef ViewSimulatorFactory_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_ViewSimulatorFactory, ViewSimulatorFactory_Helper> ViewSimulatorFactory_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_ViewSimulatorFactory,ViewSimulatorFactory_Helper > ViewSimulatorFactory_out;

#endif

  // interface ViewSimulatorFactory
  class ViewSimulatorFactory {
  public:
    // Declarations for this interface type.
    typedef ViewSimulatorFactory_ptr _ptr_type;
    typedef ViewSimulatorFactory_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_ViewSimulatorFactory :
    public virtual _objref_ServerObject
  {
  public:
    ViewSimulator_ptr create();

    inline _objref_ViewSimulatorFactory()  { _PR_setobj(0); }  // nil
    _objref_ViewSimulatorFactory(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_ViewSimulatorFactory();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_ViewSimulatorFactory(const _objref_ViewSimulatorFactory&);
    _objref_ViewSimulatorFactory& operator = (const _objref_ViewSimulatorFactory&);
    // not implemented

    friend class ViewSimulatorFactory;
  };

  class _pof_ViewSimulatorFactory : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_ViewSimulatorFactory() : _OMNI_NS(proxyObjectFactory)(ViewSimulatorFactory::_PD_repoId) {}
    virtual ~_pof_ViewSimulatorFactory();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_ViewSimulatorFactory :
    public virtual _impl_ServerObject
  {
  public:
    virtual ~_impl_ViewSimulatorFactory();

    virtual ViewSimulator_ptr create() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_OpenHRP
_CORBA_MODULE_BEG

  class Camera :
    public virtual OpenHRP::_impl_Camera,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~Camera();

    inline ::OpenHRP::Camera_ptr _this() {
      return (::OpenHRP::Camera_ptr) _do_this(::OpenHRP::Camera::_PD_repoId);
    }
  };

  class ViewSimulator :
    public virtual OpenHRP::_impl_ViewSimulator,
    public virtual World
  {
  public:
    virtual ~ViewSimulator();

    inline ::OpenHRP::ViewSimulator_ptr _this() {
      return (::OpenHRP::ViewSimulator_ptr) _do_this(::OpenHRP::ViewSimulator::_PD_repoId);
    }
  };

  class ViewSimulatorFactory :
    public virtual OpenHRP::_impl_ViewSimulatorFactory,
    public virtual ServerObject
  {
  public:
    virtual ~ViewSimulatorFactory();

    inline ::OpenHRP::ViewSimulatorFactory_ptr _this() {
      return (::OpenHRP::ViewSimulatorFactory_ptr) _do_this(::OpenHRP::ViewSimulatorFactory::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenHRP
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(OpenHRP::PixelFormat _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (OpenHRP::PixelFormat& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= OpenHRP::RGB) {
    _e = (OpenHRP::PixelFormat) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(OpenHRP::Camera::CameraType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (OpenHRP::Camera::CameraType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= OpenHRP::Camera::MONO_DEPTH) {
    _e = (OpenHRP::Camera::CameraType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
OpenHRP::Camera::_marshalObjRef(::OpenHRP::Camera_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
OpenHRP::ViewSimulator::_marshalObjRef(::OpenHRP::ViewSimulator_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
OpenHRP::ViewSimulatorFactory::_marshalObjRef(::OpenHRP::ViewSimulatorFactory_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ViewSimulator
#endif

#endif  // __ViewSimulator_hh__

