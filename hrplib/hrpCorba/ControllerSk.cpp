// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "Controller.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



::CORBA::Exception::insertExceptionToAny OpenHRP::Controller::ControllerException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP OpenHRP::Controller::ControllerException::insertToAnyFnNCP = 0;

OpenHRP::Controller::ControllerException::ControllerException(const OpenHRP::Controller::ControllerException& _s) : ::CORBA::UserException(_s)
{
  description = _s.description;

}

OpenHRP::Controller::ControllerException::ControllerException(const char* _description)
{
  pd_insertToAnyFn    = OpenHRP::Controller::ControllerException::insertToAnyFn;
  pd_insertToAnyFnNCP = OpenHRP::Controller::ControllerException::insertToAnyFnNCP;
  description = _description;

}



OpenHRP::Controller::ControllerException& OpenHRP::Controller::ControllerException::operator=(const OpenHRP::Controller::ControllerException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  description = _s.description;

  return *this;
}

OpenHRP::Controller::ControllerException::~ControllerException() {}

void OpenHRP::Controller::ControllerException::_raise() const { throw *this; }

const char* OpenHRP::Controller::ControllerException::_PD_repoId = "IDL:OpenHRP/Controller/ControllerException:1.0";
const char* OpenHRP::Controller::ControllerException::_PD_typeId = "Exception/UserException/OpenHRP::Controller::ControllerException";

OpenHRP::Controller::ControllerException* OpenHRP::Controller::ControllerException::_downcast(::CORBA::Exception* _e) {
  return (ControllerException*) _NP_is_a(_e, _PD_typeId);
}

const OpenHRP::Controller::ControllerException* OpenHRP::Controller::ControllerException::_downcast(const ::CORBA::Exception* _e) {
  return (const ControllerException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* OpenHRP::Controller::ControllerException::_NP_duplicate() const {
  return new ControllerException(*this);
}

const char* OpenHRP::Controller::ControllerException::_NP_typeId() const {
  return _PD_typeId;
}

const char* OpenHRP::Controller::ControllerException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:OpenHRP/Controller/ControllerException:1.0");
  return _PD_repoId;
}
 
void OpenHRP::Controller::ControllerException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
OpenHRP::Controller::ControllerException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(description,0);

}

void
OpenHRP::Controller::ControllerException::operator<<= (cdrStream& _n)
{
  description = _n.unmarshalString(0);

}

OpenHRP::Controller_ptr OpenHRP::Controller_Helper::_nil() {
  return ::OpenHRP::Controller::_nil();
}

::CORBA::Boolean OpenHRP::Controller_Helper::is_nil(::OpenHRP::Controller_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::Controller_Helper::release(::OpenHRP::Controller_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::Controller_Helper::marshalObjRef(::OpenHRP::Controller_ptr obj, cdrStream& s) {
  ::OpenHRP::Controller::_marshalObjRef(obj, s);
}

OpenHRP::Controller_ptr OpenHRP::Controller_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::Controller::_unmarshalObjRef(s);
}

void OpenHRP::Controller_Helper::duplicate(::OpenHRP::Controller_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::Controller_ptr
OpenHRP::Controller::_duplicate(::OpenHRP::Controller_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::Controller_ptr
OpenHRP::Controller::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::Controller_ptr
OpenHRP::Controller::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::Controller_ptr
OpenHRP::Controller::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Controller _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Controller* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Controller;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::Controller::_PD_repoId = "IDL:OpenHRP/Controller:1.0";


OpenHRP::_objref_Controller::~_objref_Controller() {
  
}


OpenHRP::_objref_Controller::_objref_Controller(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::Controller::_PD_repoId, ior, id, 1),
   _objref_ServerObject(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_Controller::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::Controller::_PD_repoId )
    return (::OpenHRP::Controller_ptr) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::ServerObject_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::Controller::_PD_repoId) )
    return (::OpenHRP::Controller_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::ServerObject_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cOpenHRP_mDynamicsSimulator
class _0RL_cd_337053878413040c_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_337053878413040c_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  OpenHRP::DynamicsSimulator_var arg_0_;
  OpenHRP::DynamicsSimulator_ptr arg_0;
};

void _0RL_cd_337053878413040c_00000000::marshalArguments(cdrStream& _n)
{
  OpenHRP::DynamicsSimulator::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_337053878413040c_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = OpenHRP::DynamicsSimulator::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_337053878413040c_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_337053878413040c_00000000* tcd = (_0RL_cd_337053878413040c_00000000*)cd;
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->setDynamicsSimulator(tcd->arg_0);


}

void OpenHRP::_objref_Controller::setDynamicsSimulator(::OpenHRP::DynamicsSimulator_ptr dynamicssimulator_)
{
  _0RL_cd_337053878413040c_00000000 _call_desc(_0RL_lcfn_337053878413040c_10000000, "setDynamicsSimulator", 21);
  _call_desc.arg_0 = dynamicssimulator_;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_337053878413040c_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_337053878413040c_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_337053878413040c_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_337053878413040c_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_337053878413040c_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_337053878413040c_20000000* tcd = (_0RL_cd_337053878413040c_20000000*)cd;
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->setModelName(tcd->arg_0);


}

void OpenHRP::_objref_Controller::setModelName(const char* localModelName)
{
  _0RL_cd_337053878413040c_20000000 _call_desc(_0RL_lcfn_337053878413040c_30000000, "setModelName", 13);
  _call_desc.arg_0 = localModelName;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cOpenHRP_mViewSimulator
class _0RL_cd_337053878413040c_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_337053878413040c_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  OpenHRP::ViewSimulator_var arg_0_;
  OpenHRP::ViewSimulator_ptr arg_0;
};

void _0RL_cd_337053878413040c_40000000::marshalArguments(cdrStream& _n)
{
  OpenHRP::ViewSimulator::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_337053878413040c_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = OpenHRP::ViewSimulator::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_337053878413040c_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_337053878413040c_40000000* tcd = (_0RL_cd_337053878413040c_40000000*)cd;
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->setViewSimulator(tcd->arg_0);


}

void OpenHRP::_objref_Controller::setViewSimulator(::OpenHRP::ViewSimulator_ptr viewsimulator_)
{
  _0RL_cd_337053878413040c_40000000 _call_desc(_0RL_lcfn_337053878413040c_50000000, "setViewSimulator", 17);
  _call_desc.arg_0 = viewsimulator_;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_337053878413040c_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_337053878413040c_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_337053878413040c_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_70000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->start();


}

void OpenHRP::_objref_Controller::start()
{
  _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_70000000, "start", 6);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_e_cOpenHRP_mController_mControllerException
class _0RL_cd_337053878413040c_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_337053878413040c_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_337053878413040c_80000000::_user_exns[] = {
  OpenHRP::Controller::ControllerException::_PD_repoId
};

void _0RL_cd_337053878413040c_80000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, OpenHRP::Controller::ControllerException::_PD_repoId) ) {
    OpenHRP::Controller::ControllerException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->initialize();
#else
  if (!cd->is_upcall())
    impl->initialize();
  else {
    try {
      impl->initialize();
    }
    catch(OpenHRP::Controller::ControllerException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void OpenHRP::_objref_Controller::initialize()
{
  _0RL_cd_337053878413040c_80000000 _call_desc(_0RL_lcfn_337053878413040c_90000000, "initialize", 11);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_a0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->control();


}

void OpenHRP::_objref_Controller::control()
{
  _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_a0000000, "control", 8);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_b0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->input();


}

void OpenHRP::_objref_Controller::input()
{
  _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_b0000000, "input", 6);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_c0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->output();


}

void OpenHRP::_objref_Controller::output()
{
  _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_c0000000, "output", 7);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_d0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->stop();


}

void OpenHRP::_objref_Controller::stop()
{
  _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_d0000000, "stop", 5);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_e0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->destroy();


}

void OpenHRP::_objref_Controller::destroy()
{
  _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_e0000000, "destroy", 8);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cdouble
class _0RL_cd_337053878413040c_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_337053878413040c_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
};

void _0RL_cd_337053878413040c_f0000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_337053878413040c_f0000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;

}

const char* const _0RL_cd_337053878413040c_f0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_337053878413040c_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_337053878413040c_f0000000* tcd = (_0RL_cd_337053878413040c_f0000000*)cd;
  OpenHRP::_impl_Controller* impl = (OpenHRP::_impl_Controller*) svnt->_ptrToInterface(OpenHRP::Controller::_PD_repoId);
  impl->setTimeStep(tcd->arg_0);


}

void OpenHRP::_objref_Controller::setTimeStep(::CORBA::Double timeStep)
{
  _0RL_cd_337053878413040c_f0000000 _call_desc(_0RL_lcfn_337053878413040c_01000000, "setTimeStep", 12);
  _call_desc.arg_0 = timeStep;

  _invoke(_call_desc);



}
OpenHRP::_pof_Controller::~_pof_Controller() {}


omniObjRef*
OpenHRP::_pof_Controller::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_Controller(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_Controller::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::Controller::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::ServerObject::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_Controller _the_pof_OpenHRP_mController;

OpenHRP::_impl_Controller::~_impl_Controller() {}


::CORBA::Boolean
OpenHRP::_impl_Controller::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "setDynamicsSimulator") ) {

    _0RL_cd_337053878413040c_00000000 _call_desc(_0RL_lcfn_337053878413040c_10000000, "setDynamicsSimulator", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setModelName") ) {

    _0RL_cd_337053878413040c_20000000 _call_desc(_0RL_lcfn_337053878413040c_30000000, "setModelName", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setViewSimulator") ) {

    _0RL_cd_337053878413040c_40000000 _call_desc(_0RL_lcfn_337053878413040c_50000000, "setViewSimulator", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "start") ) {

    _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_70000000, "start", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "initialize") ) {

    _0RL_cd_337053878413040c_80000000 _call_desc(_0RL_lcfn_337053878413040c_90000000, "initialize", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "control") ) {

    _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_a0000000, "control", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "input") ) {

    _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_b0000000, "input", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "output") ) {

    _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_c0000000, "output", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_d0000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "destroy") ) {

    _0RL_cd_337053878413040c_60000000 _call_desc(_0RL_lcfn_337053878413040c_e0000000, "destroy", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setTimeStep") ) {

    _0RL_cd_337053878413040c_f0000000 _call_desc(_0RL_lcfn_337053878413040c_01000000, "setTimeStep", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ServerObject*)this)->
      _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_Controller::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::Controller::_PD_repoId )
    return (::OpenHRP::_impl_Controller*) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::Controller::_PD_repoId) )
    return (::OpenHRP::_impl_Controller*) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_Controller::_mostDerivedRepoId()
{
  return ::OpenHRP::Controller::_PD_repoId;
}

POA_OpenHRP::Controller::~Controller() {}

