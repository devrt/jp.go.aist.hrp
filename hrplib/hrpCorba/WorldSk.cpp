// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "World.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



OpenHRP::World_ptr OpenHRP::World_Helper::_nil() {
  return ::OpenHRP::World::_nil();
}

::CORBA::Boolean OpenHRP::World_Helper::is_nil(::OpenHRP::World_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::World_Helper::release(::OpenHRP::World_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::World_Helper::marshalObjRef(::OpenHRP::World_ptr obj, cdrStream& s) {
  ::OpenHRP::World::_marshalObjRef(obj, s);
}

OpenHRP::World_ptr OpenHRP::World_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::World::_unmarshalObjRef(s);
}

void OpenHRP::World_Helper::duplicate(::OpenHRP::World_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::World_ptr
OpenHRP::World::_duplicate(::OpenHRP::World_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::World_ptr
OpenHRP::World::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::World_ptr
OpenHRP::World::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::World_ptr
OpenHRP::World::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_World _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_World* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_World;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::World::_PD_repoId = "IDL:OpenHRP/World:1.0";


OpenHRP::_objref_World::~_objref_World() {
  
}


OpenHRP::_objref_World::_objref_World(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::World::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_World::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::World_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::World_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cOpenHRP_mBodyInfo
class _0RL_cd_9e1ac01e693124d0_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9e1ac01e693124d0_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::BodyInfo_var arg_1_;
  OpenHRP::BodyInfo_ptr arg_1;
};

void _0RL_cd_9e1ac01e693124d0_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  OpenHRP::BodyInfo::_marshalObjRef(arg_1,_n);

}

void _0RL_cd_9e1ac01e693124d0_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = OpenHRP::BodyInfo::_unmarshalObjRef(_n);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_9e1ac01e693124d0_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_9e1ac01e693124d0_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9e1ac01e693124d0_00000000* tcd = (_0RL_cd_9e1ac01e693124d0_00000000*)cd;
  OpenHRP::_impl_World* impl = (OpenHRP::_impl_World*) svnt->_ptrToInterface(OpenHRP::World::_PD_repoId);
  impl->registerCharacter(tcd->arg_0, tcd->arg_1);


}

void OpenHRP::_objref_World::registerCharacter(const char* name, ::OpenHRP::BodyInfo_ptr cinfo)
{
  _0RL_cd_9e1ac01e693124d0_00000000 _call_desc(_0RL_lcfn_9e1ac01e693124d0_10000000, "registerCharacter", 18);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = cinfo;

  _invoke(_call_desc);



}
OpenHRP::_pof_World::~_pof_World() {}


omniObjRef*
OpenHRP::_pof_World::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_World(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_World::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::World::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_World _the_pof_OpenHRP_mWorld;

OpenHRP::_impl_World::~_impl_World() {}


::CORBA::Boolean
OpenHRP::_impl_World::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "registerCharacter") ) {

    _0RL_cd_9e1ac01e693124d0_00000000 _call_desc(_0RL_lcfn_9e1ac01e693124d0_10000000, "registerCharacter", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_World::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::_impl_World*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::_impl_World*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_World::_mostDerivedRepoId()
{
  return ::OpenHRP::World::_PD_repoId;
}

POA_OpenHRP::World::~World() {}

