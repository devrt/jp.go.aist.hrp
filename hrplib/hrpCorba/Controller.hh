// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Controller_hh__
#define __Controller_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Controller
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Controller
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Controller
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include "OpenHRPCommon.hh"
#endif
#ifndef __ModelLoader_hh_EXTERNAL_GUARD__
#define __ModelLoader_hh_EXTERNAL_GUARD__
#include "ModelLoader.hh"
#endif
#ifndef __World_hh_EXTERNAL_GUARD__
#define __World_hh_EXTERNAL_GUARD__
#include "World.hh"
#endif
#ifndef __CollisionDetector_hh_EXTERNAL_GUARD__
#define __CollisionDetector_hh_EXTERNAL_GUARD__
#include "CollisionDetector.hh"
#endif
#ifndef __DynamicsSimulator_hh_EXTERNAL_GUARD__
#define __DynamicsSimulator_hh_EXTERNAL_GUARD__
#include "DynamicsSimulator.hh"
#endif
#ifndef __ViewSimulator_hh_EXTERNAL_GUARD__
#define __ViewSimulator_hh_EXTERNAL_GUARD__
#include "ViewSimulator.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE OpenHRP

_CORBA_MODULE_BEG

#ifndef __OpenHRP_mController__
#define __OpenHRP_mController__

  class Controller;
  class _objref_Controller;
  class _impl_Controller;
  
  typedef _objref_Controller* Controller_ptr;
  typedef Controller_ptr ControllerRef;

  class Controller_Helper {
  public:
    typedef Controller_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Controller, Controller_Helper> Controller_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Controller,Controller_Helper > Controller_out;

#endif

  // interface Controller
  class Controller {
  public:
    // Declarations for this interface type.
    typedef Controller_ptr _ptr_type;
    typedef Controller_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class ControllerException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member description;

    

      inline ControllerException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ControllerException(const ControllerException&);
      ControllerException(const char* i_description);
      ControllerException& operator=(const ControllerException&);
      virtual ~ControllerException();
      virtual void _raise() const;
      static ControllerException* _downcast(::CORBA::Exception*);
      static const ControllerException* _downcast(const ::CORBA::Exception*);
      static inline ControllerException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

  
  };

  class _objref_Controller :
    public virtual _objref_ServerObject
  {
  public:
    void setDynamicsSimulator(::OpenHRP::DynamicsSimulator_ptr dynamicssimulator_);
    void setModelName(const char* localModelName);
    void setViewSimulator(::OpenHRP::ViewSimulator_ptr viewsimulator_);
    void start();
    void initialize();
    void control();
    void input();
    void output();
    void stop();
    void destroy();
    void setTimeStep(::CORBA::Double timeStep);

    inline _objref_Controller()  { _PR_setobj(0); }  // nil
    _objref_Controller(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Controller();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Controller(const _objref_Controller&);
    _objref_Controller& operator = (const _objref_Controller&);
    // not implemented

    friend class Controller;
  };

  class _pof_Controller : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Controller() : _OMNI_NS(proxyObjectFactory)(Controller::_PD_repoId) {}
    virtual ~_pof_Controller();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Controller :
    public virtual _impl_ServerObject
  {
  public:
    virtual ~_impl_Controller();

    virtual void setDynamicsSimulator(::OpenHRP::DynamicsSimulator_ptr dynamicssimulator_) = 0;
    virtual void setModelName(const char* localModelName) = 0;
    virtual void setViewSimulator(::OpenHRP::ViewSimulator_ptr viewsimulator_) = 0;
    virtual void start() = 0;
    virtual void initialize() = 0;
    virtual void control() = 0;
    virtual void input() = 0;
    virtual void output() = 0;
    virtual void stop() = 0;
    virtual void destroy() = 0;
    virtual void setTimeStep(::CORBA::Double timeStep) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_OpenHRP
_CORBA_MODULE_BEG

  class Controller :
    public virtual OpenHRP::_impl_Controller,
    public virtual ServerObject
  {
  public:
    virtual ~Controller();

    inline ::OpenHRP::Controller_ptr _this() {
      return (::OpenHRP::Controller_ptr) _do_this(::OpenHRP::Controller::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenHRP
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
OpenHRP::Controller::_marshalObjRef(::OpenHRP::Controller_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Controller
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Controller
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Controller
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Controller
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Controller
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Controller
#endif

#endif  // __Controller_hh__

