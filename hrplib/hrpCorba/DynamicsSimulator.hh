// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __DynamicsSimulator_hh__
#define __DynamicsSimulator_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include "OpenHRPCommon.hh"
#endif
#ifndef __ModelLoader_hh_EXTERNAL_GUARD__
#define __ModelLoader_hh_EXTERNAL_GUARD__
#include "ModelLoader.hh"
#endif
#ifndef __World_hh_EXTERNAL_GUARD__
#define __World_hh_EXTERNAL_GUARD__
#include "World.hh"
#endif
#ifndef __CollisionDetector_hh_EXTERNAL_GUARD__
#define __CollisionDetector_hh_EXTERNAL_GUARD__
#include "CollisionDetector.hh"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE OpenHRP

_CORBA_MODULE_BEG

  struct SensorState {
    typedef _CORBA_ConstrType_Variable_Var<SensorState> _var_type;

    
    DblSequence q;

    DblSequence dq;

    DblSequence u;

    typedef _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray6, DblArray6_slice, ::CORBA::Double, 6, 8, 8 >  _force_seq;
    _force_seq force;

    typedef _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray3, DblArray3_slice, ::CORBA::Double, 3, 8, 8 >  _rateGyro_seq;
    _rateGyro_seq rateGyro;

    typedef _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray3, DblArray3_slice, ::CORBA::Double, 3, 8, 8 >  _accel_seq;
    _accel_seq accel;

    typedef _CORBA_Unbounded_Sequence< DblSequence >  _range_seq;
    _range_seq range;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef SensorState::_var_type SensorState_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< SensorState,SensorState_var > SensorState_out;

  class SensorStateSequence_var;

  class SensorStateSequence : public _CORBA_Unbounded_Sequence< SensorState >  {
  public:
    typedef SensorStateSequence_var _var_type;
    inline SensorStateSequence() {}
    inline SensorStateSequence(const SensorStateSequence& _s)
      : _CORBA_Unbounded_Sequence< SensorState > (_s) {}

    inline SensorStateSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< SensorState > (_max) {}
    inline SensorStateSequence(_CORBA_ULong _max, _CORBA_ULong _len, SensorState* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< SensorState > (_max, _len, _val, _rel) {}

  

    inline SensorStateSequence& operator = (const SensorStateSequence& _s) {
      _CORBA_Unbounded_Sequence< SensorState > ::operator=(_s);
      return *this;
    }
  };

  class SensorStateSequence_out;

  class SensorStateSequence_var {
  public:
    inline SensorStateSequence_var() : _pd_seq(0) {}
    inline SensorStateSequence_var(SensorStateSequence* _s) : _pd_seq(_s) {}
    inline SensorStateSequence_var(const SensorStateSequence_var& _s) {
      if( _s._pd_seq )  _pd_seq = new SensorStateSequence(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~SensorStateSequence_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline SensorStateSequence_var& operator = (SensorStateSequence* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline SensorStateSequence_var& operator = (const SensorStateSequence_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new SensorStateSequence;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline SensorState& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline SensorStateSequence* operator -> () { return _pd_seq; }
    inline const SensorStateSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator SensorStateSequence& () const { return *_pd_seq; }
#else
    inline operator const SensorStateSequence& () const { return *_pd_seq; }
    inline operator SensorStateSequence& () { return *_pd_seq; }
#endif
      
    inline const SensorStateSequence& in() const { return *_pd_seq; }
    inline SensorStateSequence&       inout()    { return *_pd_seq; }
    inline SensorStateSequence*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline SensorStateSequence* _retn() { SensorStateSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class SensorStateSequence_out;
    
  private:
    SensorStateSequence* _pd_seq;
  };

  class SensorStateSequence_out {
  public:
    inline SensorStateSequence_out(SensorStateSequence*& _s) : _data(_s) { _data = 0; }
    inline SensorStateSequence_out(SensorStateSequence_var& _s)
      : _data(_s._pd_seq) { _s = (SensorStateSequence*) 0; }
    inline SensorStateSequence_out(const SensorStateSequence_out& _s) : _data(_s._data) {}
    inline SensorStateSequence_out& operator = (const SensorStateSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline SensorStateSequence_out& operator = (SensorStateSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator SensorStateSequence*&()  { return _data; }
    inline SensorStateSequence*& ptr()       { return _data; }
    inline SensorStateSequence* operator->() { return _data; }

    inline SensorState& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    SensorStateSequence*& _data;

  private:
    SensorStateSequence_out();
    SensorStateSequence_out& operator=(const SensorStateSequence_var&);
  };

#ifndef __OpenHRP_mDynamicsSimulator__
#define __OpenHRP_mDynamicsSimulator__

  class DynamicsSimulator;
  class _objref_DynamicsSimulator;
  class _impl_DynamicsSimulator;
  
  typedef _objref_DynamicsSimulator* DynamicsSimulator_ptr;
  typedef DynamicsSimulator_ptr DynamicsSimulatorRef;

  class DynamicsSimulator_Helper {
  public:
    typedef DynamicsSimulator_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_DynamicsSimulator, DynamicsSimulator_Helper> DynamicsSimulator_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_DynamicsSimulator,DynamicsSimulator_Helper > DynamicsSimulator_out;

#endif

  // interface DynamicsSimulator
  class DynamicsSimulator {
  public:
    // Declarations for this interface type.
    typedef DynamicsSimulator_ptr _ptr_type;
    typedef DynamicsSimulator_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum JointDriveMode { HIGH_GAIN_MODE, TORQUE_MODE /*, __max_JointDriveMode=0xffffffff */ };
    typedef JointDriveMode& JointDriveMode_out;

    enum SensorOption { DISABLE_SENSOR, ENABLE_SENSOR /*, __max_SensorOption=0xffffffff */ };
    typedef SensorOption& SensorOption_out;

    enum IntegrateMethod { EULER, RUNGE_KUTTA /*, __max_IntegrateMethod=0xffffffff */ };
    typedef IntegrateMethod& IntegrateMethod_out;

    enum LinkDataType { INVALID_DATA_TYPE, POSITION_GIVEN, JOINT_VALUE, JOINT_VELOCITY, JOINT_ACCELERATION, JOINT_TORQUE, ABS_TRANSFORM, ABS_VELOCITY, ABS_ACCELERATION, EXTERNAL_FORCE, CONSTRAINT_FORCE /*, __max_LinkDataType=0xffffffff */ };
    typedef LinkDataType& LinkDataType_out;

  
  };

  class _objref_DynamicsSimulator :
    public virtual _objref_World
  {
  public:
    void destroy();
    void init(::CORBA::Double timeStep, ::OpenHRP::DynamicsSimulator::IntegrateMethod integrateOpt, ::OpenHRP::DynamicsSimulator::SensorOption sensorOpt);
    void registerCollisionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double staticFriction, ::CORBA::Double slipFriction, const ::OpenHRP::DblSequence6& K, const ::OpenHRP::DblSequence6& C, ::CORBA::Double culling_thresh, ::CORBA::Double Restitution);
    void registerIntersectionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double tolerance);
    void registerExtraJoint(const char* char1, const char* link1, const char* char2, const char* link2, const ::OpenHRP::DblSequence3& link1LocalPos, const ::OpenHRP::DblSequence3& link2LocalPos, ::OpenHRP::ExtraJointType jointType, const ::OpenHRP::DblSequence3& jointAxis, const char* extraJointName);
    void getExtraJointConstraintForce(const char* characterName, const char* extraJointName, ::OpenHRP::DblSequence6_out contactForce);
    void getCharacterSensorValues(const char* characterName, const char* sensorName, ::OpenHRP::DblSequence_out values);
    void initSimulation();
    void stepSimulation();
    void setCharacterLinkData(const char* character, const char* link, ::OpenHRP::DynamicsSimulator::LinkDataType type, const ::OpenHRP::DblSequence& data);
    void getCharacterLinkData(const char* characterName, const char* link, ::OpenHRP::DynamicsSimulator::LinkDataType type, ::OpenHRP::DblSequence_out rdata);
    void getCharacterAllLinkData(const char* characterName, ::OpenHRP::DynamicsSimulator::LinkDataType type, ::OpenHRP::DblSequence_out wdata);
    void setCharacterAllLinkData(const char* characterName, ::OpenHRP::DynamicsSimulator::LinkDataType type, const ::OpenHRP::DblSequence& wdata);
    void setGVector(const ::OpenHRP::DblSequence3& wdata);
    void getGVector(::OpenHRP::DblSequence3_out wdata);
    void setCharacterAllJointModes(const char* characterName, ::OpenHRP::DynamicsSimulator::JointDriveMode jointMode);
    ::CORBA::Boolean calcCharacterInverseKinematics(const char* characterName, const char* baseLink, const char* targetLink, const ::OpenHRP::LinkPosition& target);
    void calcCharacterForwardKinematics(const char* characterName);
    void calcWorldForwardKinematics();
    ::CORBA::Boolean checkCollision(::CORBA::Boolean checkAll);
    LinkPairSequence* checkIntersection(::CORBA::Boolean checkAll);
    DistanceSequence* checkDistance();
    void getWorldState(::OpenHRP::WorldState_out wstate);
    void getCharacterSensorState(const char* characterName, ::OpenHRP::SensorState_out sstate);
    ::CORBA::Boolean getCharacterCollidingPairs(const char* characterName, ::OpenHRP::LinkPairSequence_out pairs);
    void calcCharacterJacobian(const char* characterName, const char* baseLink, const char* targetLink, ::OpenHRP::DblSequence_out jacobian);

    inline _objref_DynamicsSimulator()  { _PR_setobj(0); }  // nil
    _objref_DynamicsSimulator(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_DynamicsSimulator();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_DynamicsSimulator(const _objref_DynamicsSimulator&);
    _objref_DynamicsSimulator& operator = (const _objref_DynamicsSimulator&);
    // not implemented

    friend class DynamicsSimulator;
  };

  class _pof_DynamicsSimulator : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_DynamicsSimulator() : _OMNI_NS(proxyObjectFactory)(DynamicsSimulator::_PD_repoId) {}
    virtual ~_pof_DynamicsSimulator();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_DynamicsSimulator :
    public virtual _impl_World
  {
  public:
    virtual ~_impl_DynamicsSimulator();

    virtual void destroy() = 0;
    virtual void init(::CORBA::Double timeStep, ::OpenHRP::DynamicsSimulator::IntegrateMethod integrateOpt, ::OpenHRP::DynamicsSimulator::SensorOption sensorOpt) = 0;
    virtual void registerCollisionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double staticFriction, ::CORBA::Double slipFriction, const ::OpenHRP::DblSequence6& K, const ::OpenHRP::DblSequence6& C, ::CORBA::Double culling_thresh, ::CORBA::Double Restitution) = 0;
    virtual void registerIntersectionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double tolerance) = 0;
    virtual void registerExtraJoint(const char* char1, const char* link1, const char* char2, const char* link2, const ::OpenHRP::DblSequence3& link1LocalPos, const ::OpenHRP::DblSequence3& link2LocalPos, ::OpenHRP::ExtraJointType jointType, const ::OpenHRP::DblSequence3& jointAxis, const char* extraJointName) = 0;
    virtual void getExtraJointConstraintForce(const char* characterName, const char* extraJointName, ::OpenHRP::DblSequence6_out contactForce) = 0;
    virtual void getCharacterSensorValues(const char* characterName, const char* sensorName, ::OpenHRP::DblSequence_out values) = 0;
    virtual void initSimulation() = 0;
    virtual void stepSimulation() = 0;
    virtual void setCharacterLinkData(const char* character, const char* link, ::OpenHRP::DynamicsSimulator::LinkDataType type, const ::OpenHRP::DblSequence& data) = 0;
    virtual void getCharacterLinkData(const char* characterName, const char* link, ::OpenHRP::DynamicsSimulator::LinkDataType type, ::OpenHRP::DblSequence_out rdata) = 0;
    virtual void getCharacterAllLinkData(const char* characterName, ::OpenHRP::DynamicsSimulator::LinkDataType type, ::OpenHRP::DblSequence_out wdata) = 0;
    virtual void setCharacterAllLinkData(const char* characterName, ::OpenHRP::DynamicsSimulator::LinkDataType type, const ::OpenHRP::DblSequence& wdata) = 0;
    virtual void setGVector(const ::OpenHRP::DblSequence3& wdata) = 0;
    virtual void getGVector(::OpenHRP::DblSequence3_out wdata) = 0;
    virtual void setCharacterAllJointModes(const char* characterName, ::OpenHRP::DynamicsSimulator::JointDriveMode jointMode) = 0;
    virtual ::CORBA::Boolean calcCharacterInverseKinematics(const char* characterName, const char* baseLink, const char* targetLink, const ::OpenHRP::LinkPosition& target) = 0;
    virtual void calcCharacterForwardKinematics(const char* characterName) = 0;
    virtual void calcWorldForwardKinematics() = 0;
    virtual ::CORBA::Boolean checkCollision(::CORBA::Boolean checkAll) = 0;
    virtual LinkPairSequence* checkIntersection(::CORBA::Boolean checkAll) = 0;
    virtual DistanceSequence* checkDistance() = 0;
    virtual void getWorldState(::OpenHRP::WorldState_out wstate) = 0;
    virtual void getCharacterSensorState(const char* characterName, ::OpenHRP::SensorState_out sstate) = 0;
    virtual ::CORBA::Boolean getCharacterCollidingPairs(const char* characterName, ::OpenHRP::LinkPairSequence_out pairs) = 0;
    virtual void calcCharacterJacobian(const char* characterName, const char* baseLink, const char* targetLink, ::OpenHRP::DblSequence_out jacobian) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __OpenHRP_mDynamicsSimulatorFactory__
#define __OpenHRP_mDynamicsSimulatorFactory__

  class DynamicsSimulatorFactory;
  class _objref_DynamicsSimulatorFactory;
  class _impl_DynamicsSimulatorFactory;
  
  typedef _objref_DynamicsSimulatorFactory* DynamicsSimulatorFactory_ptr;
  typedef DynamicsSimulatorFactory_ptr DynamicsSimulatorFactoryRef;

  class DynamicsSimulatorFactory_Helper {
  public:
    typedef DynamicsSimulatorFactory_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_DynamicsSimulatorFactory, DynamicsSimulatorFactory_Helper> DynamicsSimulatorFactory_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_DynamicsSimulatorFactory,DynamicsSimulatorFactory_Helper > DynamicsSimulatorFactory_out;

#endif

  // interface DynamicsSimulatorFactory
  class DynamicsSimulatorFactory {
  public:
    // Declarations for this interface type.
    typedef DynamicsSimulatorFactory_ptr _ptr_type;
    typedef DynamicsSimulatorFactory_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_DynamicsSimulatorFactory :
    public virtual _objref_ServerObject
  {
  public:
    DynamicsSimulator_ptr create();

    inline _objref_DynamicsSimulatorFactory()  { _PR_setobj(0); }  // nil
    _objref_DynamicsSimulatorFactory(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_DynamicsSimulatorFactory();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_DynamicsSimulatorFactory(const _objref_DynamicsSimulatorFactory&);
    _objref_DynamicsSimulatorFactory& operator = (const _objref_DynamicsSimulatorFactory&);
    // not implemented

    friend class DynamicsSimulatorFactory;
  };

  class _pof_DynamicsSimulatorFactory : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_DynamicsSimulatorFactory() : _OMNI_NS(proxyObjectFactory)(DynamicsSimulatorFactory::_PD_repoId) {}
    virtual ~_pof_DynamicsSimulatorFactory();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_DynamicsSimulatorFactory :
    public virtual _impl_ServerObject
  {
  public:
    virtual ~_impl_DynamicsSimulatorFactory();

    virtual DynamicsSimulator_ptr create() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_OpenHRP
_CORBA_MODULE_BEG

  class DynamicsSimulator :
    public virtual OpenHRP::_impl_DynamicsSimulator,
    public virtual World
  {
  public:
    virtual ~DynamicsSimulator();

    inline ::OpenHRP::DynamicsSimulator_ptr _this() {
      return (::OpenHRP::DynamicsSimulator_ptr) _do_this(::OpenHRP::DynamicsSimulator::_PD_repoId);
    }
  };

  class DynamicsSimulatorFactory :
    public virtual OpenHRP::_impl_DynamicsSimulatorFactory,
    public virtual ServerObject
  {
  public:
    virtual ~DynamicsSimulatorFactory();

    inline ::OpenHRP::DynamicsSimulatorFactory_ptr _this() {
      return (::OpenHRP::DynamicsSimulatorFactory_ptr) _do_this(::OpenHRP::DynamicsSimulatorFactory::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenHRP
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(OpenHRP::DynamicsSimulator::JointDriveMode _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (OpenHRP::DynamicsSimulator::JointDriveMode& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= OpenHRP::DynamicsSimulator::TORQUE_MODE) {
    _e = (OpenHRP::DynamicsSimulator::JointDriveMode) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(OpenHRP::DynamicsSimulator::SensorOption _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (OpenHRP::DynamicsSimulator::SensorOption& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= OpenHRP::DynamicsSimulator::ENABLE_SENSOR) {
    _e = (OpenHRP::DynamicsSimulator::SensorOption) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(OpenHRP::DynamicsSimulator::IntegrateMethod _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (OpenHRP::DynamicsSimulator::IntegrateMethod& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= OpenHRP::DynamicsSimulator::RUNGE_KUTTA) {
    _e = (OpenHRP::DynamicsSimulator::IntegrateMethod) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

inline void operator >>=(OpenHRP::DynamicsSimulator::LinkDataType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (OpenHRP::DynamicsSimulator::LinkDataType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= OpenHRP::DynamicsSimulator::CONSTRAINT_FORCE) {
    _e = (OpenHRP::DynamicsSimulator::LinkDataType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
OpenHRP::DynamicsSimulator::_marshalObjRef(::OpenHRP::DynamicsSimulator_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
OpenHRP::DynamicsSimulatorFactory::_marshalObjRef(::OpenHRP::DynamicsSimulatorFactory_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_DynamicsSimulator
#endif

#endif  // __DynamicsSimulator_hh__

