// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "ViewSimulator.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
OpenHRP::ImageData::operator>>= (cdrStream &_n) const
{
  format >>= _n;
  width >>= _n;
  height >>= _n;
  (const _CORBA_Unbounded_Sequence_Octet&) octetData >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &) longData >>= _n;
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > &) floatData >>= _n;

}

void
OpenHRP::ImageData::operator<<= (cdrStream &_n)
{
  (PixelFormat&)format <<= _n;
  (::CORBA::Long&)width <<= _n;
  (::CORBA::Long&)height <<= _n;
  (_CORBA_Unbounded_Sequence_Octet&)octetData <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &)longData <<= _n;
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > &)floatData <<= _n;

}

void
OpenHRP::Camera::CameraParameter::operator>>= (cdrStream &_n) const
{
  type >>= _n;
  frontClipDistance >>= _n;
  backClipDistance >>= _n;
  fieldOfView >>= _n;
  sensorId >>= _n;
  _n.marshalString(sensorName,0);
  _n.marshalString(defName,0);
  width >>= _n;
  height >>= _n;
  frameRate >>= _n;

}

void
OpenHRP::Camera::CameraParameter::operator<<= (cdrStream &_n)
{
  (CameraType&)type <<= _n;
  (::CORBA::Float&)frontClipDistance <<= _n;
  (::CORBA::Float&)backClipDistance <<= _n;
  (::CORBA::Float&)fieldOfView <<= _n;
  (::CORBA::Long&)sensorId <<= _n;
  sensorName = _n.unmarshalString(0);
  defName = _n.unmarshalString(0);
  (::CORBA::Long&)width <<= _n;
  (::CORBA::Long&)height <<= _n;
  (::CORBA::Float&)frameRate <<= _n;

}

OpenHRP::Camera_ptr OpenHRP::Camera_Helper::_nil() {
  return ::OpenHRP::Camera::_nil();
}

::CORBA::Boolean OpenHRP::Camera_Helper::is_nil(::OpenHRP::Camera_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::Camera_Helper::release(::OpenHRP::Camera_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::Camera_Helper::marshalObjRef(::OpenHRP::Camera_ptr obj, cdrStream& s) {
  ::OpenHRP::Camera::_marshalObjRef(obj, s);
}

OpenHRP::Camera_ptr OpenHRP::Camera_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::Camera::_unmarshalObjRef(s);
}

void OpenHRP::Camera_Helper::duplicate(::OpenHRP::Camera_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::Camera_ptr
OpenHRP::Camera::_duplicate(::OpenHRP::Camera_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::Camera_ptr
OpenHRP::Camera::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::Camera_ptr
OpenHRP::Camera::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::Camera_ptr
OpenHRP::Camera::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Camera _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Camera* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Camera;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::Camera::_PD_repoId = "IDL:OpenHRP/Camera:1.0";


OpenHRP::_objref_Camera::~_objref_Camera() {
  
}


OpenHRP::_objref_Camera::_objref_Camera(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::Camera::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_Camera::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::Camera::_PD_repoId )
    return (::OpenHRP::Camera_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::Camera::_PD_repoId) )
    return (::OpenHRP::Camera_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_fb844877d52ee63f_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fb844877d52ee63f_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_fb844877d52ee63f_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_Camera* impl = (OpenHRP::_impl_Camera*) svnt->_ptrToInterface(OpenHRP::Camera::_PD_repoId);
  impl->destroy();


}

void OpenHRP::_objref_Camera::destroy()
{
  _0RL_cd_fb844877d52ee63f_00000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_10000000, "destroy", 8);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mCamera_mCameraParameter
class _0RL_cd_fb844877d52ee63f_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fb844877d52ee63f_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::Camera::CameraParameter_var result;
};

void _0RL_cd_fb844877d52ee63f_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::Camera::CameraParameter&) result >>= _n;

}

void _0RL_cd_fb844877d52ee63f_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::Camera::CameraParameter;
  (OpenHRP::Camera::CameraParameter&)result <<= _n;

}

const char* const _0RL_cd_fb844877d52ee63f_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fb844877d52ee63f_20000000* tcd = (_0RL_cd_fb844877d52ee63f_20000000*)cd;
  OpenHRP::_impl_Camera* impl = (OpenHRP::_impl_Camera*) svnt->_ptrToInterface(OpenHRP::Camera::_PD_repoId);
  tcd->result = impl->getCameraParameter();


}

OpenHRP::Camera::CameraParameter* OpenHRP::_objref_Camera::getCameraParameter()
{
  _0RL_cd_fb844877d52ee63f_20000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_30000000, "getCameraParameter", 19);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mImageData
class _0RL_cd_fb844877d52ee63f_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fb844877d52ee63f_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::ImageData_var result;
};

void _0RL_cd_fb844877d52ee63f_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::ImageData&) result >>= _n;

}

void _0RL_cd_fb844877d52ee63f_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::ImageData;
  (OpenHRP::ImageData&)result <<= _n;

}

const char* const _0RL_cd_fb844877d52ee63f_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fb844877d52ee63f_40000000* tcd = (_0RL_cd_fb844877d52ee63f_40000000*)cd;
  OpenHRP::_impl_Camera* impl = (OpenHRP::_impl_Camera*) svnt->_ptrToInterface(OpenHRP::Camera::_PD_repoId);
  tcd->result = impl->getImageData();


}

OpenHRP::ImageData* OpenHRP::_objref_Camera::getImageData()
{
  _0RL_cd_fb844877d52ee63f_40000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_50000000, "getImageData", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
OpenHRP::_pof_Camera::~_pof_Camera() {}


omniObjRef*
OpenHRP::_pof_Camera::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_Camera(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_Camera::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::Camera::_PD_repoId) )
    return 1;
  
  return 0;
}

const OpenHRP::_pof_Camera _the_pof_OpenHRP_mCamera;

OpenHRP::_impl_Camera::~_impl_Camera() {}


::CORBA::Boolean
OpenHRP::_impl_Camera::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "destroy") ) {

    _0RL_cd_fb844877d52ee63f_00000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_10000000, "destroy", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCameraParameter") ) {

    _0RL_cd_fb844877d52ee63f_20000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_30000000, "getCameraParameter", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getImageData") ) {

    _0RL_cd_fb844877d52ee63f_40000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_50000000, "getImageData", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
OpenHRP::_impl_Camera::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::Camera::_PD_repoId )
    return (::OpenHRP::_impl_Camera*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::Camera::_PD_repoId) )
    return (::OpenHRP::_impl_Camera*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_Camera::_mostDerivedRepoId()
{
  return ::OpenHRP::Camera::_PD_repoId;
}

OpenHRP::ViewSimulator_ptr OpenHRP::ViewSimulator_Helper::_nil() {
  return ::OpenHRP::ViewSimulator::_nil();
}

::CORBA::Boolean OpenHRP::ViewSimulator_Helper::is_nil(::OpenHRP::ViewSimulator_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::ViewSimulator_Helper::release(::OpenHRP::ViewSimulator_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::ViewSimulator_Helper::marshalObjRef(::OpenHRP::ViewSimulator_ptr obj, cdrStream& s) {
  ::OpenHRP::ViewSimulator::_marshalObjRef(obj, s);
}

OpenHRP::ViewSimulator_ptr OpenHRP::ViewSimulator_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::ViewSimulator::_unmarshalObjRef(s);
}

void OpenHRP::ViewSimulator_Helper::duplicate(::OpenHRP::ViewSimulator_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::ViewSimulator_ptr
OpenHRP::ViewSimulator::_duplicate(::OpenHRP::ViewSimulator_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::ViewSimulator_ptr
OpenHRP::ViewSimulator::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::ViewSimulator_ptr
OpenHRP::ViewSimulator::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::ViewSimulator_ptr
OpenHRP::ViewSimulator::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ViewSimulator _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ViewSimulator* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ViewSimulator;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::ViewSimulator::_PD_repoId = "IDL:OpenHRP/ViewSimulator:1.0";


OpenHRP::_objref_ViewSimulator::~_objref_ViewSimulator() {
  
}


OpenHRP::_objref_ViewSimulator::_objref_ViewSimulator(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::ViewSimulator::_PD_repoId, ior, id, 1),
   _objref_World(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_ViewSimulator::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::ViewSimulator::_PD_repoId )
    return (::OpenHRP::ViewSimulator_ptr) this;
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::World_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::ViewSimulator::_PD_repoId) )
    return (::OpenHRP::ViewSimulator_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::World_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_60000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_ViewSimulator* impl = (OpenHRP::_impl_ViewSimulator*) svnt->_ptrToInterface(OpenHRP::ViewSimulator::_PD_repoId);
  impl->destroy();


}

void OpenHRP::_objref_ViewSimulator::destroy()
{
  _0RL_cd_fb844877d52ee63f_00000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_60000000, "destroy", 8);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_o_cOpenHRP_mCameraSequence
class _0RL_cd_fb844877d52ee63f_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fb844877d52ee63f_70000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::CameraSequence_var arg_0;
};

void _0RL_cd_fb844877d52ee63f_70000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::CameraSequence&) arg_0 >>= _n;

}

void _0RL_cd_fb844877d52ee63f_70000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new OpenHRP::CameraSequence;
  (OpenHRP::CameraSequence&)arg_0 <<= _n;

}

const char* const _0RL_cd_fb844877d52ee63f_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fb844877d52ee63f_70000000* tcd = (_0RL_cd_fb844877d52ee63f_70000000*)cd;
  OpenHRP::_impl_ViewSimulator* impl = (OpenHRP::_impl_ViewSimulator*) svnt->_ptrToInterface(OpenHRP::ViewSimulator::_PD_repoId);
  impl->getCameraSequence(tcd->arg_0.out());


}

void OpenHRP::_objref_ViewSimulator::getCameraSequence(::OpenHRP::CameraSequence_out cameras)
{
  _0RL_cd_fb844877d52ee63f_70000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_80000000, "getCameraSequence", 18);


  _invoke(_call_desc);
  cameras = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_o_cOpenHRP_mCameraSequence
class _0RL_cd_fb844877d52ee63f_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fb844877d52ee63f_90000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::CameraSequence_var arg_1;
};

void _0RL_cd_fb844877d52ee63f_90000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_fb844877d52ee63f_90000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_fb844877d52ee63f_90000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::CameraSequence&) arg_1 >>= _n;

}

void _0RL_cd_fb844877d52ee63f_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_1 = new OpenHRP::CameraSequence;
  (OpenHRP::CameraSequence&)arg_1 <<= _n;

}

const char* const _0RL_cd_fb844877d52ee63f_90000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fb844877d52ee63f_90000000* tcd = (_0RL_cd_fb844877d52ee63f_90000000*)cd;
  OpenHRP::_impl_ViewSimulator* impl = (OpenHRP::_impl_ViewSimulator*) svnt->_ptrToInterface(OpenHRP::ViewSimulator::_PD_repoId);
  impl->getCameraSequenceOf(tcd->arg_0, tcd->arg_1.out());


}

void OpenHRP::_objref_ViewSimulator::getCameraSequenceOf(const char* objectName, ::OpenHRP::CameraSequence_out cameras)
{
  _0RL_cd_fb844877d52ee63f_90000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_a0000000, "getCameraSequenceOf", 20);
  _call_desc.arg_0 = objectName;

  _invoke(_call_desc);
  cameras = _call_desc.arg_1._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cOpenHRP_mWorldState
class _0RL_cd_fb844877d52ee63f_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fb844877d52ee63f_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  OpenHRP::WorldState_var arg_0_;
  const OpenHRP::WorldState* arg_0;
};

void _0RL_cd_fb844877d52ee63f_b0000000::marshalArguments(cdrStream& _n)
{
  (const OpenHRP::WorldState&) *arg_0 >>= _n;

}

void _0RL_cd_fb844877d52ee63f_b0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new OpenHRP::WorldState;
  (OpenHRP::WorldState&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_fb844877d52ee63f_b0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fb844877d52ee63f_b0000000* tcd = (_0RL_cd_fb844877d52ee63f_b0000000*)cd;
  OpenHRP::_impl_ViewSimulator* impl = (OpenHRP::_impl_ViewSimulator*) svnt->_ptrToInterface(OpenHRP::ViewSimulator::_PD_repoId);
  impl->updateScene(*tcd->arg_0);


}

void OpenHRP::_objref_ViewSimulator::updateScene(const ::OpenHRP::WorldState& state)
{
  _0RL_cd_fb844877d52ee63f_b0000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_c0000000, "updateScene", 12);
  _call_desc.arg_0 = &(::OpenHRP::WorldState&) state;

  _invoke(_call_desc);



}
OpenHRP::_pof_ViewSimulator::~_pof_ViewSimulator() {}


omniObjRef*
OpenHRP::_pof_ViewSimulator::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_ViewSimulator(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_ViewSimulator::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::ViewSimulator::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::World::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_ViewSimulator _the_pof_OpenHRP_mViewSimulator;

OpenHRP::_impl_ViewSimulator::~_impl_ViewSimulator() {}


::CORBA::Boolean
OpenHRP::_impl_ViewSimulator::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "destroy") ) {

    _0RL_cd_fb844877d52ee63f_00000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_60000000, "destroy", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCameraSequence") ) {

    _0RL_cd_fb844877d52ee63f_70000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_80000000, "getCameraSequence", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCameraSequenceOf") ) {

    _0RL_cd_fb844877d52ee63f_90000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_a0000000, "getCameraSequenceOf", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "updateScene") ) {

    _0RL_cd_fb844877d52ee63f_b0000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_c0000000, "updateScene", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_World::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_World*)this)->
      _impl_World::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_ViewSimulator::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::ViewSimulator::_PD_repoId )
    return (::OpenHRP::_impl_ViewSimulator*) this;
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::_impl_World*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::ViewSimulator::_PD_repoId) )
    return (::OpenHRP::_impl_ViewSimulator*) this;
  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::_impl_World*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_ViewSimulator::_mostDerivedRepoId()
{
  return ::OpenHRP::ViewSimulator::_PD_repoId;
}

OpenHRP::ViewSimulatorFactory_ptr OpenHRP::ViewSimulatorFactory_Helper::_nil() {
  return ::OpenHRP::ViewSimulatorFactory::_nil();
}

::CORBA::Boolean OpenHRP::ViewSimulatorFactory_Helper::is_nil(::OpenHRP::ViewSimulatorFactory_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::ViewSimulatorFactory_Helper::release(::OpenHRP::ViewSimulatorFactory_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::ViewSimulatorFactory_Helper::marshalObjRef(::OpenHRP::ViewSimulatorFactory_ptr obj, cdrStream& s) {
  ::OpenHRP::ViewSimulatorFactory::_marshalObjRef(obj, s);
}

OpenHRP::ViewSimulatorFactory_ptr OpenHRP::ViewSimulatorFactory_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::ViewSimulatorFactory::_unmarshalObjRef(s);
}

void OpenHRP::ViewSimulatorFactory_Helper::duplicate(::OpenHRP::ViewSimulatorFactory_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::ViewSimulatorFactory_ptr
OpenHRP::ViewSimulatorFactory::_duplicate(::OpenHRP::ViewSimulatorFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::ViewSimulatorFactory_ptr
OpenHRP::ViewSimulatorFactory::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::ViewSimulatorFactory_ptr
OpenHRP::ViewSimulatorFactory::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::ViewSimulatorFactory_ptr
OpenHRP::ViewSimulatorFactory::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ViewSimulatorFactory _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ViewSimulatorFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ViewSimulatorFactory;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::ViewSimulatorFactory::_PD_repoId = "IDL:OpenHRP/ViewSimulatorFactory:1.0";


OpenHRP::_objref_ViewSimulatorFactory::~_objref_ViewSimulatorFactory() {
  
}


OpenHRP::_objref_ViewSimulatorFactory::_objref_ViewSimulatorFactory(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::ViewSimulatorFactory::_PD_repoId, ior, id, 1),
   _objref_ServerObject(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_ViewSimulatorFactory::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::ViewSimulatorFactory::_PD_repoId )
    return (::OpenHRP::ViewSimulatorFactory_ptr) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::ServerObject_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::ViewSimulatorFactory::_PD_repoId) )
    return (::OpenHRP::ViewSimulatorFactory_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::ServerObject_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mViewSimulator
class _0RL_cd_fb844877d52ee63f_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_fb844877d52ee63f_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::ViewSimulator_var result;
};

void _0RL_cd_fb844877d52ee63f_d0000000::marshalReturnedValues(cdrStream& _n)
{
  OpenHRP::ViewSimulator::_marshalObjRef(result,_n);

}

void _0RL_cd_fb844877d52ee63f_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = OpenHRP::ViewSimulator::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_fb844877d52ee63f_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_fb844877d52ee63f_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_fb844877d52ee63f_d0000000* tcd = (_0RL_cd_fb844877d52ee63f_d0000000*)cd;
  OpenHRP::_impl_ViewSimulatorFactory* impl = (OpenHRP::_impl_ViewSimulatorFactory*) svnt->_ptrToInterface(OpenHRP::ViewSimulatorFactory::_PD_repoId);
  tcd->result = impl->create();


}

OpenHRP::ViewSimulator_ptr OpenHRP::_objref_ViewSimulatorFactory::create()
{
  _0RL_cd_fb844877d52ee63f_d0000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_e0000000, "create", 7);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
OpenHRP::_pof_ViewSimulatorFactory::~_pof_ViewSimulatorFactory() {}


omniObjRef*
OpenHRP::_pof_ViewSimulatorFactory::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_ViewSimulatorFactory(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_ViewSimulatorFactory::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::ViewSimulatorFactory::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::ServerObject::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_ViewSimulatorFactory _the_pof_OpenHRP_mViewSimulatorFactory;

OpenHRP::_impl_ViewSimulatorFactory::~_impl_ViewSimulatorFactory() {}


::CORBA::Boolean
OpenHRP::_impl_ViewSimulatorFactory::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "create") ) {

    _0RL_cd_fb844877d52ee63f_d0000000 _call_desc(_0RL_lcfn_fb844877d52ee63f_e0000000, "create", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ServerObject*)this)->
      _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_ViewSimulatorFactory::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::ViewSimulatorFactory::_PD_repoId )
    return (::OpenHRP::_impl_ViewSimulatorFactory*) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::ViewSimulatorFactory::_PD_repoId) )
    return (::OpenHRP::_impl_ViewSimulatorFactory*) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_ViewSimulatorFactory::_mostDerivedRepoId()
{
  return ::OpenHRP::ViewSimulatorFactory::_PD_repoId;
}

POA_OpenHRP::Camera::~Camera() {}

POA_OpenHRP::ViewSimulator::~ViewSimulator() {}

POA_OpenHRP::ViewSimulatorFactory::~ViewSimulatorFactory() {}

