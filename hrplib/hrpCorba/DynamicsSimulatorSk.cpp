// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "DynamicsSimulator.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
OpenHRP::SensorState::operator>>= (cdrStream &_n) const
{
  (const DblSequence&) q >>= _n;
  (const DblSequence&) dq >>= _n;
  (const DblSequence&) u >>= _n;
  (const _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray6, DblArray6_slice, ::CORBA::Double, 6, 8, 8 > &) force >>= _n;
  (const _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray3, DblArray3_slice, ::CORBA::Double, 3, 8, 8 > &) rateGyro >>= _n;
  (const _CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray3, DblArray3_slice, ::CORBA::Double, 3, 8, 8 > &) accel >>= _n;
  (const _CORBA_Unbounded_Sequence< DblSequence > &) range >>= _n;

}

void
OpenHRP::SensorState::operator<<= (cdrStream &_n)
{
  (DblSequence&)q <<= _n;
  (DblSequence&)dq <<= _n;
  (DblSequence&)u <<= _n;
  (_CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray6, DblArray6_slice, ::CORBA::Double, 6, 8, 8 > &)force <<= _n;
  (_CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray3, DblArray3_slice, ::CORBA::Double, 3, 8, 8 > &)rateGyro <<= _n;
  (_CORBA_Unbounded_Sequence_Array_w_FixSizeElement< DblArray3, DblArray3_slice, ::CORBA::Double, 3, 8, 8 > &)accel <<= _n;
  (_CORBA_Unbounded_Sequence< DblSequence > &)range <<= _n;

}

OpenHRP::DynamicsSimulator_ptr OpenHRP::DynamicsSimulator_Helper::_nil() {
  return ::OpenHRP::DynamicsSimulator::_nil();
}

::CORBA::Boolean OpenHRP::DynamicsSimulator_Helper::is_nil(::OpenHRP::DynamicsSimulator_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::DynamicsSimulator_Helper::release(::OpenHRP::DynamicsSimulator_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::DynamicsSimulator_Helper::marshalObjRef(::OpenHRP::DynamicsSimulator_ptr obj, cdrStream& s) {
  ::OpenHRP::DynamicsSimulator::_marshalObjRef(obj, s);
}

OpenHRP::DynamicsSimulator_ptr OpenHRP::DynamicsSimulator_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::DynamicsSimulator::_unmarshalObjRef(s);
}

void OpenHRP::DynamicsSimulator_Helper::duplicate(::OpenHRP::DynamicsSimulator_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::DynamicsSimulator_ptr
OpenHRP::DynamicsSimulator::_duplicate(::OpenHRP::DynamicsSimulator_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::DynamicsSimulator_ptr
OpenHRP::DynamicsSimulator::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::DynamicsSimulator_ptr
OpenHRP::DynamicsSimulator::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::DynamicsSimulator_ptr
OpenHRP::DynamicsSimulator::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DynamicsSimulator _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DynamicsSimulator* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DynamicsSimulator;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::DynamicsSimulator::_PD_repoId = "IDL:OpenHRP/DynamicsSimulator:1.0";


OpenHRP::_objref_DynamicsSimulator::~_objref_DynamicsSimulator() {
  
}


OpenHRP::_objref_DynamicsSimulator::_objref_DynamicsSimulator(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::DynamicsSimulator::_PD_repoId, ior, id, 1),
   _objref_World(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_DynamicsSimulator::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::DynamicsSimulator::_PD_repoId )
    return (::OpenHRP::DynamicsSimulator_ptr) this;
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::World_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::DynamicsSimulator::_PD_repoId) )
    return (::OpenHRP::DynamicsSimulator_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::World_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_049c34d47752ec20_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_049c34d47752ec20_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->destroy();


}

void OpenHRP::_objref_DynamicsSimulator::destroy()
{
  _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_10000000, "destroy", 8);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cdouble_i_cOpenHRP_mDynamicsSimulator_mIntegrateMethod_i_cOpenHRP_mDynamicsSimulator_mSensorOption
class _0RL_cd_049c34d47752ec20_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  OpenHRP::DynamicsSimulator::IntegrateMethod arg_1;
  OpenHRP::DynamicsSimulator::SensorOption arg_2;
};

void _0RL_cd_049c34d47752ec20_20000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_049c34d47752ec20_20000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;
  (OpenHRP::DynamicsSimulator::IntegrateMethod&)arg_1 <<= _n;
  (OpenHRP::DynamicsSimulator::SensorOption&)arg_2 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_20000000* tcd = (_0RL_cd_049c34d47752ec20_20000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->init(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void OpenHRP::_objref_DynamicsSimulator::init(::CORBA::Double timeStep, ::OpenHRP::DynamicsSimulator::IntegrateMethod integrateOpt, ::OpenHRP::DynamicsSimulator::SensorOption sensorOpt)
{
  _0RL_cd_049c34d47752ec20_20000000 _call_desc(_0RL_lcfn_049c34d47752ec20_30000000, "init", 5);
  _call_desc.arg_0 = timeStep;
  _call_desc.arg_1 = integrateOpt;
  _call_desc.arg_2 = sensorOpt;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cstring_i_cstring_i_cdouble_i_cdouble_i_cOpenHRP_mDblSequence6_i_cOpenHRP_mDblSequence6_i_cdouble_i_cdouble
class _0RL_cd_049c34d47752ec20_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::String_var arg_3_;
  const char* arg_3;
  ::CORBA::Double arg_4;
  ::CORBA::Double arg_5;
  OpenHRP::DblSequence6_var arg_6_;
  const OpenHRP::DblSequence6* arg_6;
  OpenHRP::DblSequence6_var arg_7_;
  const OpenHRP::DblSequence6* arg_7;
  ::CORBA::Double arg_8;
  ::CORBA::Double arg_9;
};

void _0RL_cd_049c34d47752ec20_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);
  _n.marshalString(arg_3,0);
  arg_4 >>= _n;
  arg_5 >>= _n;
  (const OpenHRP::DblSequence6&) *arg_6 >>= _n;
  (const OpenHRP::DblSequence6&) *arg_7 >>= _n;
  arg_8 >>= _n;
  arg_9 >>= _n;

}

void _0RL_cd_049c34d47752ec20_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalString(0);
  arg_3 = arg_3_.in();
  (::CORBA::Double&)arg_4 <<= _n;
  (::CORBA::Double&)arg_5 <<= _n;
  arg_6_ = new OpenHRP::DblSequence6;
  (OpenHRP::DblSequence6&)arg_6_ <<= _n;
  arg_6 = &arg_6_.in();
  arg_7_ = new OpenHRP::DblSequence6;
  (OpenHRP::DblSequence6&)arg_7_ <<= _n;
  arg_7 = &arg_7_.in();
  (::CORBA::Double&)arg_8 <<= _n;
  (::CORBA::Double&)arg_9 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_40000000* tcd = (_0RL_cd_049c34d47752ec20_40000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->registerCollisionCheckPair(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4, tcd->arg_5, *tcd->arg_6, *tcd->arg_7, tcd->arg_8, tcd->arg_9);


}

void OpenHRP::_objref_DynamicsSimulator::registerCollisionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double staticFriction, ::CORBA::Double slipFriction, const ::OpenHRP::DblSequence6& K, const ::OpenHRP::DblSequence6& C, ::CORBA::Double culling_thresh, ::CORBA::Double Restitution)
{
  _0RL_cd_049c34d47752ec20_40000000 _call_desc(_0RL_lcfn_049c34d47752ec20_50000000, "registerCollisionCheckPair", 27);
  _call_desc.arg_0 = char1;
  _call_desc.arg_1 = name1;
  _call_desc.arg_2 = char2;
  _call_desc.arg_3 = name2;
  _call_desc.arg_4 = staticFriction;
  _call_desc.arg_5 = slipFriction;
  _call_desc.arg_6 = &(::OpenHRP::DblSequence6&) K;
  _call_desc.arg_7 = &(::OpenHRP::DblSequence6&) C;
  _call_desc.arg_8 = culling_thresh;
  _call_desc.arg_9 = Restitution;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cstring_i_cstring_i_cdouble
class _0RL_cd_049c34d47752ec20_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::String_var arg_3_;
  const char* arg_3;
  ::CORBA::Double arg_4;
};

void _0RL_cd_049c34d47752ec20_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);
  _n.marshalString(arg_3,0);
  arg_4 >>= _n;

}

void _0RL_cd_049c34d47752ec20_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalString(0);
  arg_3 = arg_3_.in();
  (::CORBA::Double&)arg_4 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_60000000* tcd = (_0RL_cd_049c34d47752ec20_60000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->registerIntersectionCheckPair(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

void OpenHRP::_objref_DynamicsSimulator::registerIntersectionCheckPair(const char* char1, const char* name1, const char* char2, const char* name2, ::CORBA::Double tolerance)
{
  _0RL_cd_049c34d47752ec20_60000000 _call_desc(_0RL_lcfn_049c34d47752ec20_70000000, "registerIntersectionCheckPair", 30);
  _call_desc.arg_0 = char1;
  _call_desc.arg_1 = name1;
  _call_desc.arg_2 = char2;
  _call_desc.arg_3 = name2;
  _call_desc.arg_4 = tolerance;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cstring_i_cstring_i_cOpenHRP_mDblSequence3_i_cOpenHRP_mDblSequence3_i_cOpenHRP_mExtraJointType_i_cOpenHRP_mDblSequence3_i_cstring
class _0RL_cd_049c34d47752ec20_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ::CORBA::String_var arg_3_;
  const char* arg_3;
  OpenHRP::DblSequence3_var arg_4_;
  const OpenHRP::DblSequence3* arg_4;
  OpenHRP::DblSequence3_var arg_5_;
  const OpenHRP::DblSequence3* arg_5;
  OpenHRP::ExtraJointType arg_6;
  OpenHRP::DblSequence3_var arg_7_;
  const OpenHRP::DblSequence3* arg_7;
  ::CORBA::String_var arg_8_;
  const char* arg_8;
};

void _0RL_cd_049c34d47752ec20_80000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);
  _n.marshalString(arg_3,0);
  (const OpenHRP::DblSequence3&) *arg_4 >>= _n;
  (const OpenHRP::DblSequence3&) *arg_5 >>= _n;
  arg_6 >>= _n;
  (const OpenHRP::DblSequence3&) *arg_7 >>= _n;
  _n.marshalString(arg_8,0);

}

void _0RL_cd_049c34d47752ec20_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();
  arg_3_ = _n.unmarshalString(0);
  arg_3 = arg_3_.in();
  arg_4_ = new OpenHRP::DblSequence3;
  (OpenHRP::DblSequence3&)arg_4_ <<= _n;
  arg_4 = &arg_4_.in();
  arg_5_ = new OpenHRP::DblSequence3;
  (OpenHRP::DblSequence3&)arg_5_ <<= _n;
  arg_5 = &arg_5_.in();
  (OpenHRP::ExtraJointType&)arg_6 <<= _n;
  arg_7_ = new OpenHRP::DblSequence3;
  (OpenHRP::DblSequence3&)arg_7_ <<= _n;
  arg_7 = &arg_7_.in();
  arg_8_ = _n.unmarshalString(0);
  arg_8 = arg_8_.in();

}

const char* const _0RL_cd_049c34d47752ec20_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_80000000* tcd = (_0RL_cd_049c34d47752ec20_80000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->registerExtraJoint(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3, *tcd->arg_4, *tcd->arg_5, tcd->arg_6, *tcd->arg_7, tcd->arg_8);


}

void OpenHRP::_objref_DynamicsSimulator::registerExtraJoint(const char* char1, const char* link1, const char* char2, const char* link2, const ::OpenHRP::DblSequence3& link1LocalPos, const ::OpenHRP::DblSequence3& link2LocalPos, ::OpenHRP::ExtraJointType jointType, const ::OpenHRP::DblSequence3& jointAxis, const char* extraJointName)
{
  _0RL_cd_049c34d47752ec20_80000000 _call_desc(_0RL_lcfn_049c34d47752ec20_90000000, "registerExtraJoint", 19);
  _call_desc.arg_0 = char1;
  _call_desc.arg_1 = link1;
  _call_desc.arg_2 = char2;
  _call_desc.arg_3 = link2;
  _call_desc.arg_4 = &(::OpenHRP::DblSequence3&) link1LocalPos;
  _call_desc.arg_5 = &(::OpenHRP::DblSequence3&) link2LocalPos;
  _call_desc.arg_6 = jointType;
  _call_desc.arg_7 = &(::OpenHRP::DblSequence3&) jointAxis;
  _call_desc.arg_8 = extraJointName;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_o_cOpenHRP_mDblSequence6
class _0RL_cd_049c34d47752ec20_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  OpenHRP::DblSequence6_var arg_2;
};

void _0RL_cd_049c34d47752ec20_a0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_049c34d47752ec20_a0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_049c34d47752ec20_a0000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::DblSequence6&) arg_2 >>= _n;

}

void _0RL_cd_049c34d47752ec20_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_2 = new OpenHRP::DblSequence6;
  (OpenHRP::DblSequence6&)arg_2 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_a0000000* tcd = (_0RL_cd_049c34d47752ec20_a0000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->getExtraJointConstraintForce(tcd->arg_0, tcd->arg_1, tcd->arg_2.out());


}

void OpenHRP::_objref_DynamicsSimulator::getExtraJointConstraintForce(const char* characterName, const char* extraJointName, ::OpenHRP::DblSequence6_out contactForce)
{
  _0RL_cd_049c34d47752ec20_a0000000 _call_desc(_0RL_lcfn_049c34d47752ec20_b0000000, "getExtraJointConstraintForce", 29);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = extraJointName;

  _invoke(_call_desc);
  contactForce = _call_desc.arg_2._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_o_cOpenHRP_mDblSequence
class _0RL_cd_049c34d47752ec20_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_c0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  OpenHRP::DblSequence_var arg_2;
};

void _0RL_cd_049c34d47752ec20_c0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_049c34d47752ec20_c0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_049c34d47752ec20_c0000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::DblSequence&) arg_2 >>= _n;

}

void _0RL_cd_049c34d47752ec20_c0000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_2 = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_2 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_c0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_c0000000* tcd = (_0RL_cd_049c34d47752ec20_c0000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->getCharacterSensorValues(tcd->arg_0, tcd->arg_1, tcd->arg_2.out());


}

void OpenHRP::_objref_DynamicsSimulator::getCharacterSensorValues(const char* characterName, const char* sensorName, ::OpenHRP::DblSequence_out values)
{
  _0RL_cd_049c34d47752ec20_c0000000 _call_desc(_0RL_lcfn_049c34d47752ec20_d0000000, "getCharacterSensorValues", 25);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = sensorName;

  _invoke(_call_desc);
  values = _call_desc.arg_2._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_e0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->initSimulation();


}

void OpenHRP::_objref_DynamicsSimulator::initSimulation()
{
  _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_e0000000, "initSimulation", 15);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_f0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->stepSimulation();


}

void OpenHRP::_objref_DynamicsSimulator::stepSimulation()
{
  _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_f0000000, "stepSimulation", 15);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cOpenHRP_mDynamicsSimulator_mLinkDataType_i_cOpenHRP_mDblSequence
class _0RL_cd_049c34d47752ec20_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_01000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  OpenHRP::DynamicsSimulator::LinkDataType arg_2;
  OpenHRP::DblSequence_var arg_3_;
  const OpenHRP::DblSequence* arg_3;
};

void _0RL_cd_049c34d47752ec20_01000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  arg_2 >>= _n;
  (const OpenHRP::DblSequence&) *arg_3 >>= _n;

}

void _0RL_cd_049c34d47752ec20_01000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  (OpenHRP::DynamicsSimulator::LinkDataType&)arg_2 <<= _n;
  arg_3_ = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_3_ <<= _n;
  arg_3 = &arg_3_.in();

}

const char* const _0RL_cd_049c34d47752ec20_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_01000000* tcd = (_0RL_cd_049c34d47752ec20_01000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->setCharacterLinkData(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3);


}

void OpenHRP::_objref_DynamicsSimulator::setCharacterLinkData(const char* character, const char* link, ::OpenHRP::DynamicsSimulator::LinkDataType type, const ::OpenHRP::DblSequence& data)
{
  _0RL_cd_049c34d47752ec20_01000000 _call_desc(_0RL_lcfn_049c34d47752ec20_11000000, "setCharacterLinkData", 21);
  _call_desc.arg_0 = character;
  _call_desc.arg_1 = link;
  _call_desc.arg_2 = type;
  _call_desc.arg_3 = &(::OpenHRP::DblSequence&) data;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cOpenHRP_mDynamicsSimulator_mLinkDataType_o_cOpenHRP_mDblSequence
class _0RL_cd_049c34d47752ec20_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  OpenHRP::DynamicsSimulator::LinkDataType arg_2;
  OpenHRP::DblSequence_var arg_3;
};

void _0RL_cd_049c34d47752ec20_21000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_049c34d47752ec20_21000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  (OpenHRP::DynamicsSimulator::LinkDataType&)arg_2 <<= _n;

}

void _0RL_cd_049c34d47752ec20_21000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::DblSequence&) arg_3 >>= _n;

}

void _0RL_cd_049c34d47752ec20_21000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_3 = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_3 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_21000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_21000000* tcd = (_0RL_cd_049c34d47752ec20_21000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->getCharacterLinkData(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3.out());


}

void OpenHRP::_objref_DynamicsSimulator::getCharacterLinkData(const char* characterName, const char* link, ::OpenHRP::DynamicsSimulator::LinkDataType type, ::OpenHRP::DblSequence_out rdata)
{
  _0RL_cd_049c34d47752ec20_21000000 _call_desc(_0RL_lcfn_049c34d47752ec20_31000000, "getCharacterLinkData", 21);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = link;
  _call_desc.arg_2 = type;

  _invoke(_call_desc);
  rdata = _call_desc.arg_3._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cOpenHRP_mDynamicsSimulator_mLinkDataType_o_cOpenHRP_mDblSequence
class _0RL_cd_049c34d47752ec20_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::DynamicsSimulator::LinkDataType arg_1;
  OpenHRP::DblSequence_var arg_2;
};

void _0RL_cd_049c34d47752ec20_41000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_049c34d47752ec20_41000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (OpenHRP::DynamicsSimulator::LinkDataType&)arg_1 <<= _n;

}

void _0RL_cd_049c34d47752ec20_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::DblSequence&) arg_2 >>= _n;

}

void _0RL_cd_049c34d47752ec20_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_2 = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_2 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_41000000* tcd = (_0RL_cd_049c34d47752ec20_41000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->getCharacterAllLinkData(tcd->arg_0, tcd->arg_1, tcd->arg_2.out());


}

void OpenHRP::_objref_DynamicsSimulator::getCharacterAllLinkData(const char* characterName, ::OpenHRP::DynamicsSimulator::LinkDataType type, ::OpenHRP::DblSequence_out wdata)
{
  _0RL_cd_049c34d47752ec20_41000000 _call_desc(_0RL_lcfn_049c34d47752ec20_51000000, "getCharacterAllLinkData", 24);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = type;

  _invoke(_call_desc);
  wdata = _call_desc.arg_2._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cOpenHRP_mDynamicsSimulator_mLinkDataType_i_cOpenHRP_mDblSequence
class _0RL_cd_049c34d47752ec20_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::DynamicsSimulator::LinkDataType arg_1;
  OpenHRP::DblSequence_var arg_2_;
  const OpenHRP::DblSequence* arg_2;
};

void _0RL_cd_049c34d47752ec20_61000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  (const OpenHRP::DblSequence&) *arg_2 >>= _n;

}

void _0RL_cd_049c34d47752ec20_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (OpenHRP::DynamicsSimulator::LinkDataType&)arg_1 <<= _n;
  arg_2_ = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_049c34d47752ec20_61000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_61000000* tcd = (_0RL_cd_049c34d47752ec20_61000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->setCharacterAllLinkData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void OpenHRP::_objref_DynamicsSimulator::setCharacterAllLinkData(const char* characterName, ::OpenHRP::DynamicsSimulator::LinkDataType type, const ::OpenHRP::DblSequence& wdata)
{
  _0RL_cd_049c34d47752ec20_61000000 _call_desc(_0RL_lcfn_049c34d47752ec20_71000000, "setCharacterAllLinkData", 24);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = type;
  _call_desc.arg_2 = &(::OpenHRP::DblSequence&) wdata;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cOpenHRP_mDblSequence3
class _0RL_cd_049c34d47752ec20_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_81000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  OpenHRP::DblSequence3_var arg_0_;
  const OpenHRP::DblSequence3* arg_0;
};

void _0RL_cd_049c34d47752ec20_81000000::marshalArguments(cdrStream& _n)
{
  (const OpenHRP::DblSequence3&) *arg_0 >>= _n;

}

void _0RL_cd_049c34d47752ec20_81000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new OpenHRP::DblSequence3;
  (OpenHRP::DblSequence3&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_049c34d47752ec20_81000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_81000000* tcd = (_0RL_cd_049c34d47752ec20_81000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->setGVector(*tcd->arg_0);


}

void OpenHRP::_objref_DynamicsSimulator::setGVector(const ::OpenHRP::DblSequence3& wdata)
{
  _0RL_cd_049c34d47752ec20_81000000 _call_desc(_0RL_lcfn_049c34d47752ec20_91000000, "setGVector", 11);
  _call_desc.arg_0 = &(::OpenHRP::DblSequence3&) wdata;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_o_cOpenHRP_mDblSequence3
class _0RL_cd_049c34d47752ec20_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_a1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::DblSequence3_var arg_0;
};

void _0RL_cd_049c34d47752ec20_a1000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::DblSequence3&) arg_0 >>= _n;

}

void _0RL_cd_049c34d47752ec20_a1000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new OpenHRP::DblSequence3;
  (OpenHRP::DblSequence3&)arg_0 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_a1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_a1000000* tcd = (_0RL_cd_049c34d47752ec20_a1000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->getGVector(tcd->arg_0.out());


}

void OpenHRP::_objref_DynamicsSimulator::getGVector(::OpenHRP::DblSequence3_out wdata)
{
  _0RL_cd_049c34d47752ec20_a1000000 _call_desc(_0RL_lcfn_049c34d47752ec20_b1000000, "getGVector", 11);


  _invoke(_call_desc);
  wdata = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cOpenHRP_mDynamicsSimulator_mJointDriveMode
class _0RL_cd_049c34d47752ec20_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_c1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::DynamicsSimulator::JointDriveMode arg_1;
};

void _0RL_cd_049c34d47752ec20_c1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_049c34d47752ec20_c1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (OpenHRP::DynamicsSimulator::JointDriveMode&)arg_1 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_c1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_c1000000* tcd = (_0RL_cd_049c34d47752ec20_c1000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->setCharacterAllJointModes(tcd->arg_0, tcd->arg_1);


}

void OpenHRP::_objref_DynamicsSimulator::setCharacterAllJointModes(const char* characterName, ::OpenHRP::DynamicsSimulator::JointDriveMode jointMode)
{
  _0RL_cd_049c34d47752ec20_c1000000 _call_desc(_0RL_lcfn_049c34d47752ec20_d1000000, "setCharacterAllJointModes", 26);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = jointMode;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cstring_i_cstring_i_cOpenHRP_mLinkPosition
class _0RL_cd_049c34d47752ec20_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_e1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  OpenHRP::LinkPosition arg_3_;
  const OpenHRP::LinkPosition* arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_049c34d47752ec20_e1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);
  (const OpenHRP::LinkPosition&) *arg_3 >>= _n;

}

void _0RL_cd_049c34d47752ec20_e1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();
  (OpenHRP::LinkPosition&)arg_3_ <<= _n;
  arg_3 = &arg_3_;

}

void _0RL_cd_049c34d47752ec20_e1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_049c34d47752ec20_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_049c34d47752ec20_e1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_e1000000* tcd = (_0RL_cd_049c34d47752ec20_e1000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  tcd->result = impl->calcCharacterInverseKinematics(tcd->arg_0, tcd->arg_1, tcd->arg_2, *tcd->arg_3);


}

::CORBA::Boolean OpenHRP::_objref_DynamicsSimulator::calcCharacterInverseKinematics(const char* characterName, const char* baseLink, const char* targetLink, const ::OpenHRP::LinkPosition& target)
{
  _0RL_cd_049c34d47752ec20_e1000000 _call_desc(_0RL_lcfn_049c34d47752ec20_f1000000, "calcCharacterInverseKinematics", 31);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = baseLink;
  _call_desc.arg_2 = targetLink;
  _call_desc.arg_3 = &(::OpenHRP::LinkPosition&) target;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_049c34d47752ec20_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_02000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_049c34d47752ec20_02000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_049c34d47752ec20_02000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_049c34d47752ec20_02000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_02000000* tcd = (_0RL_cd_049c34d47752ec20_02000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->calcCharacterForwardKinematics(tcd->arg_0);


}

void OpenHRP::_objref_DynamicsSimulator::calcCharacterForwardKinematics(const char* characterName)
{
  _0RL_cd_049c34d47752ec20_02000000 _call_desc(_0RL_lcfn_049c34d47752ec20_12000000, "calcCharacterForwardKinematics", 31);
  _call_desc.arg_0 = characterName;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_22000000(omniCallDescriptor*, omniServant* svnt)
{
  
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->calcWorldForwardKinematics();


}

void OpenHRP::_objref_DynamicsSimulator::calcWorldForwardKinematics()
{
  _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_22000000, "calcWorldForwardKinematics", 27);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cboolean
class _0RL_cd_049c34d47752ec20_32000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_32000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_049c34d47752ec20_32000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_049c34d47752ec20_32000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

void _0RL_cd_049c34d47752ec20_32000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_049c34d47752ec20_32000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_049c34d47752ec20_32000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_32000000* tcd = (_0RL_cd_049c34d47752ec20_32000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  tcd->result = impl->checkCollision(tcd->arg_0);


}

::CORBA::Boolean OpenHRP::_objref_DynamicsSimulator::checkCollision(::CORBA::Boolean checkAll)
{
  _0RL_cd_049c34d47752ec20_32000000 _call_desc(_0RL_lcfn_049c34d47752ec20_42000000, "checkCollision", 15);
  _call_desc.arg_0 = checkAll;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mLinkPairSequence_i_cboolean
class _0RL_cd_049c34d47752ec20_52000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_52000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean arg_0;
  OpenHRP::LinkPairSequence_var result;
};

void _0RL_cd_049c34d47752ec20_52000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);

}

void _0RL_cd_049c34d47752ec20_52000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();

}

void _0RL_cd_049c34d47752ec20_52000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::LinkPairSequence&) result >>= _n;

}

void _0RL_cd_049c34d47752ec20_52000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::LinkPairSequence;
  (OpenHRP::LinkPairSequence&)result <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_52000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_62000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_52000000* tcd = (_0RL_cd_049c34d47752ec20_52000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  tcd->result = impl->checkIntersection(tcd->arg_0);


}

OpenHRP::LinkPairSequence* OpenHRP::_objref_DynamicsSimulator::checkIntersection(::CORBA::Boolean checkAll)
{
  _0RL_cd_049c34d47752ec20_52000000 _call_desc(_0RL_lcfn_049c34d47752ec20_62000000, "checkIntersection", 18);
  _call_desc.arg_0 = checkAll;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mDistanceSequence
class _0RL_cd_049c34d47752ec20_72000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_72000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::DistanceSequence_var result;
};

void _0RL_cd_049c34d47752ec20_72000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::DistanceSequence&) result >>= _n;

}

void _0RL_cd_049c34d47752ec20_72000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new OpenHRP::DistanceSequence;
  (OpenHRP::DistanceSequence&)result <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_72000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_72000000* tcd = (_0RL_cd_049c34d47752ec20_72000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  tcd->result = impl->checkDistance();


}

OpenHRP::DistanceSequence* OpenHRP::_objref_DynamicsSimulator::checkDistance()
{
  _0RL_cd_049c34d47752ec20_72000000 _call_desc(_0RL_lcfn_049c34d47752ec20_82000000, "checkDistance", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_o_cOpenHRP_mWorldState
class _0RL_cd_049c34d47752ec20_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_92000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::WorldState_var arg_0;
};

void _0RL_cd_049c34d47752ec20_92000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::WorldState&) arg_0 >>= _n;

}

void _0RL_cd_049c34d47752ec20_92000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new OpenHRP::WorldState;
  (OpenHRP::WorldState&)arg_0 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_92000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_92000000* tcd = (_0RL_cd_049c34d47752ec20_92000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->getWorldState(tcd->arg_0.out());


}

void OpenHRP::_objref_DynamicsSimulator::getWorldState(::OpenHRP::WorldState_out wstate)
{
  _0RL_cd_049c34d47752ec20_92000000 _call_desc(_0RL_lcfn_049c34d47752ec20_a2000000, "getWorldState", 14);


  _invoke(_call_desc);
  wstate = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_o_cOpenHRP_mSensorState
class _0RL_cd_049c34d47752ec20_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_b2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::SensorState_var arg_1;
};

void _0RL_cd_049c34d47752ec20_b2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_049c34d47752ec20_b2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_049c34d47752ec20_b2000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::SensorState&) arg_1 >>= _n;

}

void _0RL_cd_049c34d47752ec20_b2000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_1 = new OpenHRP::SensorState;
  (OpenHRP::SensorState&)arg_1 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_b2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_b2000000* tcd = (_0RL_cd_049c34d47752ec20_b2000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->getCharacterSensorState(tcd->arg_0, tcd->arg_1.out());


}

void OpenHRP::_objref_DynamicsSimulator::getCharacterSensorState(const char* characterName, ::OpenHRP::SensorState_out sstate)
{
  _0RL_cd_049c34d47752ec20_b2000000 _call_desc(_0RL_lcfn_049c34d47752ec20_c2000000, "getCharacterSensorState", 24);
  _call_desc.arg_0 = characterName;

  _invoke(_call_desc);
  sstate = _call_desc.arg_1._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_o_cOpenHRP_mLinkPairSequence
class _0RL_cd_049c34d47752ec20_d2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_d2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  OpenHRP::LinkPairSequence_var arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_049c34d47752ec20_d2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_049c34d47752ec20_d2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_049c34d47752ec20_d2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const OpenHRP::LinkPairSequence&) arg_1 >>= _n;

}

void _0RL_cd_049c34d47752ec20_d2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_1 = new OpenHRP::LinkPairSequence;
  (OpenHRP::LinkPairSequence&)arg_1 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_d2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_d2000000* tcd = (_0RL_cd_049c34d47752ec20_d2000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  tcd->result = impl->getCharacterCollidingPairs(tcd->arg_0, tcd->arg_1.out());


}

::CORBA::Boolean OpenHRP::_objref_DynamicsSimulator::getCharacterCollidingPairs(const char* characterName, ::OpenHRP::LinkPairSequence_out pairs)
{
  _0RL_cd_049c34d47752ec20_d2000000 _call_desc(_0RL_lcfn_049c34d47752ec20_e2000000, "getCharacterCollidingPairs", 27);
  _call_desc.arg_0 = characterName;

  _invoke(_call_desc);
  pairs = _call_desc.arg_1._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cstring_o_cOpenHRP_mDblSequence
class _0RL_cd_049c34d47752ec20_f2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_f2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  OpenHRP::DblSequence_var arg_3;
};

void _0RL_cd_049c34d47752ec20_f2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_049c34d47752ec20_f2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_049c34d47752ec20_f2000000::marshalReturnedValues(cdrStream& _n)
{
  (const OpenHRP::DblSequence&) arg_3 >>= _n;

}

void _0RL_cd_049c34d47752ec20_f2000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_3 = new OpenHRP::DblSequence;
  (OpenHRP::DblSequence&)arg_3 <<= _n;

}

const char* const _0RL_cd_049c34d47752ec20_f2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_03000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_f2000000* tcd = (_0RL_cd_049c34d47752ec20_f2000000*)cd;
  OpenHRP::_impl_DynamicsSimulator* impl = (OpenHRP::_impl_DynamicsSimulator*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulator::_PD_repoId);
  impl->calcCharacterJacobian(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3.out());


}

void OpenHRP::_objref_DynamicsSimulator::calcCharacterJacobian(const char* characterName, const char* baseLink, const char* targetLink, ::OpenHRP::DblSequence_out jacobian)
{
  _0RL_cd_049c34d47752ec20_f2000000 _call_desc(_0RL_lcfn_049c34d47752ec20_03000000, "calcCharacterJacobian", 22);
  _call_desc.arg_0 = characterName;
  _call_desc.arg_1 = baseLink;
  _call_desc.arg_2 = targetLink;

  _invoke(_call_desc);
  jacobian = _call_desc.arg_3._retn();


}
OpenHRP::_pof_DynamicsSimulator::~_pof_DynamicsSimulator() {}


omniObjRef*
OpenHRP::_pof_DynamicsSimulator::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_DynamicsSimulator(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_DynamicsSimulator::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::DynamicsSimulator::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::World::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_DynamicsSimulator _the_pof_OpenHRP_mDynamicsSimulator;

OpenHRP::_impl_DynamicsSimulator::~_impl_DynamicsSimulator() {}


::CORBA::Boolean
OpenHRP::_impl_DynamicsSimulator::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "destroy") ) {

    _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_10000000, "destroy", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "init") ) {

    _0RL_cd_049c34d47752ec20_20000000 _call_desc(_0RL_lcfn_049c34d47752ec20_30000000, "init", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerCollisionCheckPair") ) {

    _0RL_cd_049c34d47752ec20_40000000 _call_desc(_0RL_lcfn_049c34d47752ec20_50000000, "registerCollisionCheckPair", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerIntersectionCheckPair") ) {

    _0RL_cd_049c34d47752ec20_60000000 _call_desc(_0RL_lcfn_049c34d47752ec20_70000000, "registerIntersectionCheckPair", 30, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerExtraJoint") ) {

    _0RL_cd_049c34d47752ec20_80000000 _call_desc(_0RL_lcfn_049c34d47752ec20_90000000, "registerExtraJoint", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getExtraJointConstraintForce") ) {

    _0RL_cd_049c34d47752ec20_a0000000 _call_desc(_0RL_lcfn_049c34d47752ec20_b0000000, "getExtraJointConstraintForce", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCharacterSensorValues") ) {

    _0RL_cd_049c34d47752ec20_c0000000 _call_desc(_0RL_lcfn_049c34d47752ec20_d0000000, "getCharacterSensorValues", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "initSimulation") ) {

    _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_e0000000, "initSimulation", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stepSimulation") ) {

    _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_f0000000, "stepSimulation", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setCharacterLinkData") ) {

    _0RL_cd_049c34d47752ec20_01000000 _call_desc(_0RL_lcfn_049c34d47752ec20_11000000, "setCharacterLinkData", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCharacterLinkData") ) {

    _0RL_cd_049c34d47752ec20_21000000 _call_desc(_0RL_lcfn_049c34d47752ec20_31000000, "getCharacterLinkData", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCharacterAllLinkData") ) {

    _0RL_cd_049c34d47752ec20_41000000 _call_desc(_0RL_lcfn_049c34d47752ec20_51000000, "getCharacterAllLinkData", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setCharacterAllLinkData") ) {

    _0RL_cd_049c34d47752ec20_61000000 _call_desc(_0RL_lcfn_049c34d47752ec20_71000000, "setCharacterAllLinkData", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setGVector") ) {

    _0RL_cd_049c34d47752ec20_81000000 _call_desc(_0RL_lcfn_049c34d47752ec20_91000000, "setGVector", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getGVector") ) {

    _0RL_cd_049c34d47752ec20_a1000000 _call_desc(_0RL_lcfn_049c34d47752ec20_b1000000, "getGVector", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setCharacterAllJointModes") ) {

    _0RL_cd_049c34d47752ec20_c1000000 _call_desc(_0RL_lcfn_049c34d47752ec20_d1000000, "setCharacterAllJointModes", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "calcCharacterInverseKinematics") ) {

    _0RL_cd_049c34d47752ec20_e1000000 _call_desc(_0RL_lcfn_049c34d47752ec20_f1000000, "calcCharacterInverseKinematics", 31, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "calcCharacterForwardKinematics") ) {

    _0RL_cd_049c34d47752ec20_02000000 _call_desc(_0RL_lcfn_049c34d47752ec20_12000000, "calcCharacterForwardKinematics", 31, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "calcWorldForwardKinematics") ) {

    _0RL_cd_049c34d47752ec20_00000000 _call_desc(_0RL_lcfn_049c34d47752ec20_22000000, "calcWorldForwardKinematics", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "checkCollision") ) {

    _0RL_cd_049c34d47752ec20_32000000 _call_desc(_0RL_lcfn_049c34d47752ec20_42000000, "checkCollision", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "checkIntersection") ) {

    _0RL_cd_049c34d47752ec20_52000000 _call_desc(_0RL_lcfn_049c34d47752ec20_62000000, "checkIntersection", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "checkDistance") ) {

    _0RL_cd_049c34d47752ec20_72000000 _call_desc(_0RL_lcfn_049c34d47752ec20_82000000, "checkDistance", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getWorldState") ) {

    _0RL_cd_049c34d47752ec20_92000000 _call_desc(_0RL_lcfn_049c34d47752ec20_a2000000, "getWorldState", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCharacterSensorState") ) {

    _0RL_cd_049c34d47752ec20_b2000000 _call_desc(_0RL_lcfn_049c34d47752ec20_c2000000, "getCharacterSensorState", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCharacterCollidingPairs") ) {

    _0RL_cd_049c34d47752ec20_d2000000 _call_desc(_0RL_lcfn_049c34d47752ec20_e2000000, "getCharacterCollidingPairs", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "calcCharacterJacobian") ) {

    _0RL_cd_049c34d47752ec20_f2000000 _call_desc(_0RL_lcfn_049c34d47752ec20_03000000, "calcCharacterJacobian", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_World::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_World*)this)->
      _impl_World::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_DynamicsSimulator::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::DynamicsSimulator::_PD_repoId )
    return (::OpenHRP::_impl_DynamicsSimulator*) this;
  if( id == ::OpenHRP::World::_PD_repoId )
    return (::OpenHRP::_impl_World*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::DynamicsSimulator::_PD_repoId) )
    return (::OpenHRP::_impl_DynamicsSimulator*) this;
  if( omni::strMatch(id, ::OpenHRP::World::_PD_repoId) )
    return (::OpenHRP::_impl_World*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_DynamicsSimulator::_mostDerivedRepoId()
{
  return ::OpenHRP::DynamicsSimulator::_PD_repoId;
}

OpenHRP::DynamicsSimulatorFactory_ptr OpenHRP::DynamicsSimulatorFactory_Helper::_nil() {
  return ::OpenHRP::DynamicsSimulatorFactory::_nil();
}

::CORBA::Boolean OpenHRP::DynamicsSimulatorFactory_Helper::is_nil(::OpenHRP::DynamicsSimulatorFactory_ptr p) {
  return ::CORBA::is_nil(p);

}

void OpenHRP::DynamicsSimulatorFactory_Helper::release(::OpenHRP::DynamicsSimulatorFactory_ptr p) {
  ::CORBA::release(p);
}

void OpenHRP::DynamicsSimulatorFactory_Helper::marshalObjRef(::OpenHRP::DynamicsSimulatorFactory_ptr obj, cdrStream& s) {
  ::OpenHRP::DynamicsSimulatorFactory::_marshalObjRef(obj, s);
}

OpenHRP::DynamicsSimulatorFactory_ptr OpenHRP::DynamicsSimulatorFactory_Helper::unmarshalObjRef(cdrStream& s) {
  return ::OpenHRP::DynamicsSimulatorFactory::_unmarshalObjRef(s);
}

void OpenHRP::DynamicsSimulatorFactory_Helper::duplicate(::OpenHRP::DynamicsSimulatorFactory_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

OpenHRP::DynamicsSimulatorFactory_ptr
OpenHRP::DynamicsSimulatorFactory::_duplicate(::OpenHRP::DynamicsSimulatorFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

OpenHRP::DynamicsSimulatorFactory_ptr
OpenHRP::DynamicsSimulatorFactory::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


OpenHRP::DynamicsSimulatorFactory_ptr
OpenHRP::DynamicsSimulatorFactory::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

OpenHRP::DynamicsSimulatorFactory_ptr
OpenHRP::DynamicsSimulatorFactory::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DynamicsSimulatorFactory _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DynamicsSimulatorFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DynamicsSimulatorFactory;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* OpenHRP::DynamicsSimulatorFactory::_PD_repoId = "IDL:OpenHRP/DynamicsSimulatorFactory:1.0";


OpenHRP::_objref_DynamicsSimulatorFactory::~_objref_DynamicsSimulatorFactory() {
  
}


OpenHRP::_objref_DynamicsSimulatorFactory::_objref_DynamicsSimulatorFactory(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::OpenHRP::DynamicsSimulatorFactory::_PD_repoId, ior, id, 1),
   _objref_ServerObject(ior, id)
   
{
  _PR_setobj(this);
}

void*
OpenHRP::_objref_DynamicsSimulatorFactory::_ptrToObjRef(const char* id)
{
  if( id == ::OpenHRP::DynamicsSimulatorFactory::_PD_repoId )
    return (::OpenHRP::DynamicsSimulatorFactory_ptr) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::ServerObject_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::OpenHRP::DynamicsSimulatorFactory::_PD_repoId) )
    return (::OpenHRP::DynamicsSimulatorFactory_ptr) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::ServerObject_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cOpenHRP_mDynamicsSimulator
class _0RL_cd_049c34d47752ec20_13000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_049c34d47752ec20_13000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  OpenHRP::DynamicsSimulator_var result;
};

void _0RL_cd_049c34d47752ec20_13000000::marshalReturnedValues(cdrStream& _n)
{
  OpenHRP::DynamicsSimulator::_marshalObjRef(result,_n);

}

void _0RL_cd_049c34d47752ec20_13000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = OpenHRP::DynamicsSimulator::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_049c34d47752ec20_13000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_049c34d47752ec20_23000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_049c34d47752ec20_13000000* tcd = (_0RL_cd_049c34d47752ec20_13000000*)cd;
  OpenHRP::_impl_DynamicsSimulatorFactory* impl = (OpenHRP::_impl_DynamicsSimulatorFactory*) svnt->_ptrToInterface(OpenHRP::DynamicsSimulatorFactory::_PD_repoId);
  tcd->result = impl->create();


}

OpenHRP::DynamicsSimulator_ptr OpenHRP::_objref_DynamicsSimulatorFactory::create()
{
  _0RL_cd_049c34d47752ec20_13000000 _call_desc(_0RL_lcfn_049c34d47752ec20_23000000, "create", 7);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
OpenHRP::_pof_DynamicsSimulatorFactory::~_pof_DynamicsSimulatorFactory() {}


omniObjRef*
OpenHRP::_pof_DynamicsSimulatorFactory::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::OpenHRP::_objref_DynamicsSimulatorFactory(ior, id);
}


::CORBA::Boolean
OpenHRP::_pof_DynamicsSimulatorFactory::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::OpenHRP::DynamicsSimulatorFactory::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, OpenHRP::ServerObject::_PD_repoId) )
    return 1;


  return 0;
}

const OpenHRP::_pof_DynamicsSimulatorFactory _the_pof_OpenHRP_mDynamicsSimulatorFactory;

OpenHRP::_impl_DynamicsSimulatorFactory::~_impl_DynamicsSimulatorFactory() {}


::CORBA::Boolean
OpenHRP::_impl_DynamicsSimulatorFactory::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "create") ) {

    _0RL_cd_049c34d47752ec20_13000000 _call_desc(_0RL_lcfn_049c34d47752ec20_23000000, "create", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_ServerObject*)this)->
      _impl_ServerObject::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
OpenHRP::_impl_DynamicsSimulatorFactory::_ptrToInterface(const char* id)
{
  if( id == ::OpenHRP::DynamicsSimulatorFactory::_PD_repoId )
    return (::OpenHRP::_impl_DynamicsSimulatorFactory*) this;
  if( id == ::OpenHRP::ServerObject::_PD_repoId )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::OpenHRP::DynamicsSimulatorFactory::_PD_repoId) )
    return (::OpenHRP::_impl_DynamicsSimulatorFactory*) this;
  if( omni::strMatch(id, ::OpenHRP::ServerObject::_PD_repoId) )
    return (::OpenHRP::_impl_ServerObject*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
OpenHRP::_impl_DynamicsSimulatorFactory::_mostDerivedRepoId()
{
  return ::OpenHRP::DynamicsSimulatorFactory::_PD_repoId;
}

POA_OpenHRP::DynamicsSimulator::~DynamicsSimulator() {}

POA_OpenHRP::DynamicsSimulatorFactory::~DynamicsSimulatorFactory() {}

